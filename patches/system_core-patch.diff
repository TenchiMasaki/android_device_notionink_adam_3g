diff --git a/debuggerd/debuggerd.cpp b/debuggerd/debuggerd.cpp
old mode 100644
new mode 100755
index 7b57c20..68f5f38
--- a/debuggerd/debuggerd.cpp
+++ b/debuggerd/debuggerd.cpp
@@ -721,7 +721,7 @@ static void worker_process(int fd, debugger_request_t& request) {
 }
 
 static void monitor_worker_process(int child_pid, const debugger_request_t& request) {
-  struct timespec timeout = {.tv_sec = 10, .tv_nsec = 0 };
+  struct timespec timeout = {.tv_sec = 30, .tv_nsec = 0 };
   if (should_attach_gdb(request)) {
     // If wait_for_gdb is enabled, set the timeout to something large.
     timeout.tv_sec = INT_MAX;
diff --git a/include/utils/VectorImpl.h b/include/utils/VectorImpl.h
old mode 100644
new mode 100755
index 21ad71c..88c3a05
--- a/include/utils/VectorImpl.h
+++ b/include/utils/VectorImpl.h
@@ -105,7 +105,19 @@ protected:
     virtual void            do_splat(void* dest, const void* item, size_t num) const = 0;
     virtual void            do_move_forward(void* dest, const void* from, size_t num) const = 0;
     virtual void            do_move_backward(void* dest, const void* from, size_t num) const = 0;
-    
+
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+    // take care of FBC...
+    virtual void            reservedVectorImpl1();
+    virtual void            reservedVectorImpl2();
+    virtual void            reservedVectorImpl3();
+    virtual void            reservedVectorImpl4();
+    virtual void            reservedVectorImpl5();
+    virtual void            reservedVectorImpl6();
+    virtual void            reservedVectorImpl7();
+    virtual void            reservedVectorImpl8();
+#endif
+
 private:
         void* _grow(size_t where, size_t amount);
         void  _shrink(size_t where, size_t amount);
@@ -156,6 +168,18 @@ public:
 protected:
     virtual int             do_compare(const void* lhs, const void* rhs) const = 0;
 
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+    // take care of FBC...
+    virtual void            reservedSortedVectorImpl1();
+    virtual void            reservedSortedVectorImpl2();
+    virtual void            reservedSortedVectorImpl3();
+    virtual void            reservedSortedVectorImpl4();
+    virtual void            reservedSortedVectorImpl5();
+    virtual void            reservedSortedVectorImpl6();
+    virtual void            reservedSortedVectorImpl7();
+    virtual void            reservedSortedVectorImpl8();
+#endif
+
 private:
             ssize_t         _indexOrderOf(const void* item, size_t* order = 0) const;
 
diff --git a/init/init.cpp b/init/init.cpp
old mode 100644
new mode 100755
index 84da2b9..487ac5c
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -340,7 +340,8 @@ static int set_mmap_rnd_bits_action(const std::vector<std::string>& args)
 #endif
     if (ret == -1) {
         ERROR("Unable to set adequate mmap entropy value!\n");
-        security_failure();
+ret=0;
+        //security_failure();
     }
     return ret;
 }
@@ -559,8 +560,8 @@ static void selinux_initialize(bool in_kernel_domain) {
     if (in_kernel_domain) {
         INFO("Loading SELinux policy...\n");
         if (selinux_android_load_policy() < 0) {
-            ERROR("failed to load policy: %s\n", strerror(errno));
-            security_failure();
+            //ERROR("failed to load policy: %s\n", strerror(errno));
+            //security_failure();
         }
 
         bool kernel_enforcing = (security_getenforce() == 1);
@@ -574,7 +575,7 @@ static void selinux_initialize(bool in_kernel_domain) {
         }
 
         if (write_file("/sys/fs/selinux/checkreqprot", "0") == -1) {
-            security_failure();
+            //security_failure();
         }
 
         NOTICE("(Initializing SELinux %s took %.2fs.)\n",
@@ -646,7 +647,7 @@ int main(int argc, char** argv) {
     if (is_first_stage) {
         if (restorecon("/init") == -1) {
             ERROR("restorecon failed: %s\n", strerror(errno));
-            security_failure();
+            //security_failure();
         }
         char* path = argv[0];
         char* args[] = { path, const_cast<char*>("--second-stage"), nullptr };
diff --git a/init/service.cpp b/init/service.cpp
old mode 100644
new mode 100755
index f1ffa18..50b5696
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -372,16 +372,16 @@ bool Service::Start() {
             free(ret_scon);
         }
         if (rc == 0 && scon == mycon) {
-            ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
-            free(mycon);
-            free(fcon);
-            return false;
+            WARNING("Service %s does not have a SELinux domain defined.\n", name_.c_str());
+            //free(mycon);
+            //free(fcon);
+            //return false;
         }
         free(mycon);
         free(fcon);
         if (rc < 0) {
-            ERROR("could not get context while starting '%s'\n", name_.c_str());
-            return false;
+            WARNING("could not get context while starting '%s'\n", name_.c_str());
+            //return false;
         }
     }
 
diff --git a/init/util.cpp b/init/util.cpp
old mode 100644
new mode 100755
index 84b4155..31a87ae
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -466,9 +466,13 @@ int restorecon(const char* pathname)
     return selinux_android_restorecon(pathname, 0);
 }
 
+#define RESTORECON_RECURSIVE_FLAGS \
+        (SELINUX_ANDROID_RESTORECON_FORCE | \
+        SELINUX_ANDROID_RESTORECON_RECURSE)
+
 int restorecon_recursive(const char* pathname)
 {
-    return selinux_android_restorecon(pathname, SELINUX_ANDROID_RESTORECON_RECURSE);
+    return selinux_android_restorecon(pathname, RESTORECON_RECURSIVE_FLAGS);
 }
 
 /*
diff --git a/libutils/String8.cpp b/libutils/String8.cpp
old mode 100644
new mode 100755
index 755e0d1..23f9708
--- a/libutils/String8.cpp
+++ b/libutils/String8.cpp
@@ -167,7 +167,9 @@ String8::String8(StaticLinkage)
 String8::String8(const String8& o)
     : mString(o.mString)
 {
-    SharedBuffer::bufferFromData(mString)->acquire();
+    if (mString == NULL)
+		mString = getEmptyString();
+	SharedBuffer::bufferFromData(mString)->acquire();
 }
 
 String8::String8(const char* o)
diff --git a/libutils/VectorImpl.cpp b/libutils/VectorImpl.cpp
old mode 100644
new mode 100755
index e8d40ed..c149212
--- a/libutils/VectorImpl.cpp
+++ b/libutils/VectorImpl.cpp
@@ -556,6 +556,17 @@ void VectorImpl::_do_move_backward(void* dest, const void* from, size_t num) con
     do_move_backward(dest, from, num);
 }
 
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+void VectorImpl::reservedVectorImpl1() { }
+void VectorImpl::reservedVectorImpl2() { }
+void VectorImpl::reservedVectorImpl3() { }
+void VectorImpl::reservedVectorImpl4() { }
+void VectorImpl::reservedVectorImpl5() { }
+void VectorImpl::reservedVectorImpl6() { }
+void VectorImpl::reservedVectorImpl7() { }
+void VectorImpl::reservedVectorImpl8() { }
+#endif
+
 /*****************************************************************************/
 
 SortedVectorImpl::SortedVectorImpl(size_t itemSize, uint32_t flags)
@@ -675,6 +686,17 @@ ssize_t SortedVectorImpl::remove(const void* item)
     return i;
 }
 
+#ifdef NEEDS_VECTORIMPL_SYMBOLS
+void SortedVectorImpl::reservedSortedVectorImpl1() { };
+void SortedVectorImpl::reservedSortedVectorImpl2() { };
+void SortedVectorImpl::reservedSortedVectorImpl3() { };
+void SortedVectorImpl::reservedSortedVectorImpl4() { };
+void SortedVectorImpl::reservedSortedVectorImpl5() { };
+void SortedVectorImpl::reservedSortedVectorImpl6() { };
+void SortedVectorImpl::reservedSortedVectorImpl7() { };
+void SortedVectorImpl::reservedSortedVectorImpl8() { };
+#endif
+
 /*****************************************************************************/
 
 }; // namespace android
diff --git a/sdcard/sdcard.c b/sdcard/sdcard.c
old mode 100644
new mode 100755
index 9480e4a..b5efbc4
--- a/sdcard/sdcard.c
+++ b/sdcard/sdcard.c
@@ -113,6 +113,8 @@
  * or that a reply has already been written. */
 #define NO_STATUS 1
 
+static bool worldWritableExternalStorage = false;
+
 /* Supplementary groups to execute with */
 static const gid_t kGroups[1] = { AID_PACKAGE_INFO };
 
@@ -426,7 +428,11 @@ static void attr_from_stat(struct fuse* fuse, struct fuse_attr *attr,
         attr->gid = multiuser_get_uid(node->userid, fuse->gid);
     }
 
+
     int visible_mode = 0775 & ~fuse->mask;
+
+    if (worldWritableExternalStorage) visible_mode = 0777;
+
     if (node->perm == PERM_PRE_ROOT) {
         /* Top of multi-user view should always be visible to ensure
          * secondary users can traverse inside. */
@@ -2056,7 +2062,15 @@ static bool should_use_sdcardfs(void) {
     }
 }
 
+static void initWorldWritableStorage() {
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.external_drive_world_rw", value, "");
+    worldWritableExternalStorage = (value[0] == '1');
+}
+
 int main(int argc, char **argv) {
+    initWorldWritableStorage(); 
+
     const char *source_path = NULL;
     const char *label = NULL;
     uid_t uid = 0;
