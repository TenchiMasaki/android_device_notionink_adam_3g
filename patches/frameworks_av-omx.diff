diff --git a/include/media/AudioTrack.h b/include/media/AudioTrack.h
old mode 100644
new mode 100755
index 6f07f98..f574798
--- a/include/media/AudioTrack.h
+++ b/include/media/AudioTrack.h
@@ -247,6 +247,19 @@ public:
                                     const audio_attributes_t* pAttributes = NULL,
                                     bool doNotReconnect = false);
 
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+                        explicit AudioTrack( int streamType,
+                                    uint32_t sampleRate  = 0,
+                                    int format = AUDIO_FORMAT_DEFAULT,
+                                    int channelMask      = 0,
+                                    int frameCount       = 0,
+                                    uint32_t flags       = (uint32_t) AUDIO_OUTPUT_FLAG_NONE,
+                                    callback_t cbf       = 0,
+                                    void* user           = 0,
+                                    int notificationFrames = 0,
+                                    int sessionId        = 0);
+#endif
+
     /* Terminates the AudioTrack and unregisters it from AudioFlinger.
      * Also destroys all resources associated with the AudioTrack.
      */
@@ -297,28 +310,46 @@ public:
      * an uninitialized AudioTrack produces undefined results.
      * See set() method above for possible return codes.
      */
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+            status_t    initCheck() const;
+#else
             status_t    initCheck() const   { return mStatus; }
+#endif
 
     /* Returns this track's estimated latency in milliseconds.
      * This includes the latency due to AudioTrack buffer size, AudioMixer (if any)
      * and audio hardware driver.
      */
-            uint32_t    latency() const     { return mLatency; }
+#if defined(QCOM_DIRECTTRACK) || defined(BOARD_OMX_NEEDS_LEGACY_AUDIO)
+             uint32_t    latency() const;
+#else
+             uint32_t    latency() const     { return mLatency; }
+#endif
 
     /* getters, see constructors and set() */
 
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
             audio_stream_type_t streamType() const;
+            audio_format_t format() const;
+#else
+            audio_stream_type_t streamType() const { return mStreamType; }
             audio_format_t format() const   { return mFormat; }
+#endif
 
     /* Return frame size in bytes, which for linear PCM is
      * channelCount * (bit depth per channel / 8).
      * channelCount is determined from channelMask, and bit depth comes from format.
      * For non-linear formats, the frame size is typically 1 byte.
      */
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+            size_t      frameSize() const;
+            uint32_t    channelCount() const;
+            uint32_t    frameCount() const;
+#else
             size_t      frameSize() const   { return mFrameSize; }
-
             uint32_t    channelCount() const { return mChannelCount; }
-            size_t      frameCount() const  { return mFrameCount; }
+            uint32_t    frameCount() const  { return mFrameCount; }
+#endif
 
     /* Return the static buffer specified in constructor or set(), or 0 for streaming mode */
             sp<IMemory> sharedBuffer() const { return mSharedBuffer; }
@@ -553,7 +584,11 @@ public:
      * Returned value:
      *  AudioTrack session ID.
      */
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+            int    getSessionId() const;
+#else
             int    getSessionId() const { return mSessionId; }
+#endif
 
     /* Attach track auxiliary output to specified effect. Use effectId = 0
      * to detach track from effect.
@@ -657,7 +692,8 @@ public:
      * false for the method to return immediately without waiting to try multiple times to write
      * the full content of the buffer.
      */
-            ssize_t     write(const void* buffer, size_t size, bool blocking = true);
+            ssize_t     write(const void* buffer, size_t size);
+            ssize_t     write(const void* buffer, size_t size, bool blocking);
 
     /*
      * Dumps the state of an audio track.
diff --git a/include/media/stagefright/MediaBufferGroup.h b/include/media/stagefright/MediaBufferGroup.h
old mode 100644
new mode 100755
index a006f7f..2c0bf40
--- a/include/media/stagefright/MediaBufferGroup.h
+++ b/include/media/stagefright/MediaBufferGroup.h
@@ -34,12 +34,13 @@ public:
 
     void add_buffer(MediaBuffer *buffer);
 
+    status_t acquire_buffer( MediaBuffer **out);
     // If nonBlocking is false, it blocks until a buffer is available and
     // passes it to the caller in *buffer, while returning OK.
     // The returned buffer will have a reference count of 1.
     // If nonBlocking is true and a buffer is not immediately available,
     // buffer is set to NULL and it returns WOULD_BLOCK.
-    status_t acquire_buffer(MediaBuffer **buffer, bool nonBlocking = false);
+    status_t acquire_buffer(MediaBuffer **buffer, bool nonBlocking);
 
 protected:
     virtual void signalBufferReturned(MediaBuffer *buffer);
diff --git a/media/libmedia/Android.mk b/media/libmedia/Android.mk
index 74e4eb1..be81069 100644
--- a/media/libmedia/Android.mk
+++ b/media/libmedia/Android.mk
@@ -78,6 +78,10 @@ endif
 endif
 #QTI Resampler
 
+ifeq ($(BOARD_OMX_NEEDS_LEGACY_AUDIO),true)
+	LOCAL_CFLAGS += -DBOARD_OMX_NEEDS_LEGACY_AUDIO
+endif
+
 LOCAL_SHARED_LIBRARIES := \
 	libui liblog libcutils libutils libbinder libsonivox libicuuc libicui18n libexpat \
         libcamera_client libstagefright_foundation \
diff --git a/media/libmedia/AudioSystem.cpp b/media/libmedia/AudioSystem.cpp
old mode 100644
new mode 100755
index 9d645f0..166752c
--- a/media/libmedia/AudioSystem.cpp
+++ b/media/libmedia/AudioSystem.cpp
@@ -247,6 +247,13 @@ int AudioSystem::logToLinear(float volume)
     return volume ? 100 - int(dBConvertInverse * log(volume) + 0.5) : 0;
 }
 
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+extern "C" status_t _ZN7android11AudioSystem21getOutputSamplingRateEPii(uint32_t* samplingRate, audio_stream_type_t streamType)
+{
+    return AudioSystem::getOutputFrameCount(samplingRate, streamType);
+}
+#endif
+
 status_t AudioSystem::getOutputSamplingRate(uint32_t* samplingRate, audio_stream_type_t streamType)
 {
     audio_io_handle_t output;
@@ -286,6 +293,13 @@ status_t AudioSystem::getSamplingRate(audio_io_handle_t output,
     return NO_ERROR;
 }
 
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+extern "C" status_t _ZN7android11AudioSystem19getOutputFrameCountEPii(size_t* frameCount, audio_stream_type_t streamType)
+{
+    return AudioSystem::getOutputFrameCount(frameCount, streamType);
+}
+#endif
+
 status_t AudioSystem::getOutputFrameCount(size_t* frameCount, audio_stream_type_t streamType)
 {
     audio_io_handle_t output;
@@ -747,6 +761,14 @@ audio_policy_forced_cfg_t AudioSystem::getForceUse(audio_policy_force_use_t usag
 }
 
 
+extern "C" audio_io_handle_t _ZN7android11AudioSystem9getOutputE19audio_stream_type_tjjj27audio_policy_output_flags_t(audio_stream_type_t stream,
+                                    uint32_t samplingRate,
+                                    uint32_t format,
+                                    uint32_t channels,
+                                    audio_output_flags_t flags) {
+    return AudioSystem::getOutput(stream,samplingRate,(audio_format_t) format, channels, flags);
+}
+
 audio_io_handle_t AudioSystem::getOutput(audio_stream_type_t stream,
                                     uint32_t samplingRate,
                                     audio_format_t format,
diff --git a/media/libmedia/AudioTrack.cpp b/media/libmedia/AudioTrack.cpp
old mode 100644
new mode 100755
index d7256f8..a3fa219
--- a/media/libmedia/AudioTrack.cpp
+++ b/media/libmedia/AudioTrack.cpp
@@ -107,6 +107,22 @@ static size_t calculateMinFrameCount(
 }
 
 // static
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+uint32_t AudioTrack::latency() const { return mLatency; }
+//audio_stream_type_t AudioTrack::streamType() const { return mStreamType; }
+audio_format_t AudioTrack::format() const  { return mFormat; }
+uint32_t AudioTrack::channelCount() const  { return mChannelCount; }
+uint32_t AudioTrack::frameCount() const  { return mFrameCount; }
+size_t AudioTrack::frameSize() const { return mFrameSize; }
+status_t AudioTrack::initCheck() const { return mStatus; }
+int AudioTrack::getSessionId() const { return mSessionId; }
+
+extern "C" int _ZNK7android10AudioTrack12getSessionIdEv();
+extern "C" int _ZN7android10AudioTrack12getSessionIdEv() {
+    return _ZNK7android10AudioTrack12getSessionIdEv();
+}
+#endif
+
 status_t AudioTrack::getMinFrameCount(
         size_t* frameCount,
         audio_stream_type_t streamType,
@@ -162,6 +178,33 @@ status_t AudioTrack::getMinFrameCount(
 }
 
 // ---------------------------------------------------------------------------
+#ifdef BOARD_OMX_NEEDS_LEGACY_AUDIO
+AudioTrack::AudioTrack(
+	int streamType,
+	uint32_t sampleRate,
+	int format,
+	int channelMask,
+	int frameCount,
+	uint32_t flags,
+	callback_t cbf,
+	void* user,
+	int notificationFrames,
+	int sessionId)
+    : mCblk(NULL),
+      mStatus(NO_INIT),
+      mIsTimed(false),
+      mPreviousPriority(ANDROID_PRIORITY_NORMAL), mPreviousSchedulingGroup(SP_DEFAULT)
+#ifdef QCOM_HARDWARE
+      ,mAudioFlinger(NULL),
+      mObserver(NULL)
+#endif
+{
+    mStatus = set((audio_stream_type_t)streamType, sampleRate, (audio_format_t)format,
+            (audio_channel_mask_t) channelMask,
+	    frameCount, (audio_output_flags_t)flags, cbf, user, notificationFrames,
+	    0 /*sharedBuffer*/, false /*threadCanCallJava*/, sessionId);
+} 
+#endif
 
 AudioTrack::AudioTrack()
     : mStatus(NO_INIT),
@@ -1619,6 +1662,7 @@ void AudioTrack::releaseBuffer(const Buffer* audioBuffer)
 
 // -------------------------------------------------------------------------
 
+ssize_t AudioTrack::write(const void* buffer, size_t userSize) { return this->write(buffer, userSize, true); }
 ssize_t AudioTrack::write(const void* buffer, size_t userSize, bool blocking)
 {
     if (mTransfer != TRANSFER_SYNC || mIsTimed) {
diff --git a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
old mode 100644
new mode 100755
index e872227..38872a3
--- a/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
+++ b/media/libmediaplayerservice/nuplayer/NuPlayerRenderer.h
@@ -210,6 +210,7 @@ protected:
     status_t getCurrentPositionFromAnchor(
             int64_t *mediaUs, int64_t nowUs, bool allowPastQueuedVideo = false);
 
+
     size_t fillAudioBuffer(void *buffer, size_t size);
 
     bool onDrainAudioQueue();
diff --git a/media/libstagefright/Android.mk b/media/libstagefright/Android.mk
old mode 100644
new mode 100755
diff --git a/media/libstagefright/AudioPlayer.cpp b/media/libstagefright/AudioPlayer.cpp
old mode 100644
new mode 100755
index 1f9383b..c2bdf5b
--- a/media/libstagefright/AudioPlayer.cpp
+++ b/media/libstagefright/AudioPlayer.cpp
@@ -250,7 +250,7 @@ status_t AudioPlayer::start(bool sourceAlreadyStarted) {
         mAudioTrack = new AudioTrack(
                 AUDIO_STREAM_MUSIC, mSampleRate, AUDIO_FORMAT_PCM_16_BIT, audioMask,
                 0 /*frameCount*/, AUDIO_OUTPUT_FLAG_NONE, &AudioCallback, this,
-                0 /*notificationFrames*/);
+                0 /*notificationFrames*/, AUDIO_SESSION_ALLOCATE, AudioTrack::TRANSFER_DEFAULT, NULL, -1, -1, NULL);
 
         if ((err = mAudioTrack->initCheck()) != OK) {
             mAudioTrack.clear();
diff --git a/media/libstagefright/CameraSource.cpp b/media/libstagefright/CameraSource.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/MediaBufferGroup.cpp b/media/libstagefright/MediaBufferGroup.cpp
old mode 100644
new mode 100755
index 6ac6d4a..fc94611
--- a/media/libstagefright/MediaBufferGroup.cpp
+++ b/media/libstagefright/MediaBufferGroup.cpp
@@ -55,6 +55,11 @@ void MediaBufferGroup::add_buffer(MediaBuffer *buffer) {
     mLastBuffer = buffer;
 }
 
+
+//extern "C" status_t _ZN7android16MediaBufferGroup14acquire_bufferEPPNS_11MediaBufferE(MediaBuffer **out)
+
+status_t MediaBufferGroup::acquire_buffer( MediaBuffer **out) { return this->acquire_buffer(out, false); }
+
 status_t MediaBufferGroup::acquire_buffer(
         MediaBuffer **out, bool nonBlocking) {
     Mutex::Autolock autoLock(mLock);
diff --git a/media/libstagefright/OMXClient.cpp b/media/libstagefright/OMXClient.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/codecs/amrwbenc/Android.mk b/media/libstagefright/codecs/amrwbenc/Android.mk
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/Android.mk b/media/libstagefright/omx/Android.mk
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/GraphicBufferSource.cpp b/media/libstagefright/omx/GraphicBufferSource.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/OMX.cpp b/media/libstagefright/omx/OMX.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/OMXMaster.cpp b/media/libstagefright/omx/OMXMaster.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/SoftOMXComponent.cpp b/media/libstagefright/omx/SoftOMXComponent.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/SoftVideoDecoderOMXComponent.cpp b/media/libstagefright/omx/SoftVideoDecoderOMXComponent.cpp
old mode 100644
new mode 100755
diff --git a/media/libstagefright/omx/SoftVideoEncoderOMXComponent.cpp b/media/libstagefright/omx/SoftVideoEncoderOMXComponent.cpp
old mode 100644
new mode 100755
diff --git a/services/audioflinger/Android.mk b/services/audioflinger/Android.mk
old mode 100644
new mode 100755
index 0dd2af6..99db179
--- a/services/audioflinger/Android.mk
+++ b/services/audioflinger/Android.mk
@@ -104,6 +104,7 @@ LOCAL_SRC_FILES += \
     FastThreadState.cpp
 
 LOCAL_CFLAGS += -DSTATE_QUEUE_INSTANTIATIONS='"StateQueueInstantiations.cpp"'
+LOCAL_CFLAGS += -fno-wrapv
 
 LOCAL_CFLAGS += -fvisibility=hidden
 ifeq ($(strip $(BOARD_USES_SRS_TRUEMEDIA)),true)
