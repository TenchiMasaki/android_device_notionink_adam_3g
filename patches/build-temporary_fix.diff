diff --git a/core/Makefile b/core/Makefile
old mode 100644
new mode 100755
index ecaffff..e4eb594
--- a/core/Makefile
+++ b/core/Makefile
@@ -733,6 +733,8 @@ else
 ifeq ($(TARGET_USERIMAGES_USE_EXT4),true)
 INTERNAL_USERIMAGES_USE_EXT := true
 INTERNAL_USERIMAGES_EXT_VARIANT := ext4
+else
+INTERNAL_USERIMAGES_DEPS := $(MKYAFFS2)
 endif
 endif
 endif
diff --git a/tools/releasetools/blockimgdiff.py b/tools/releasetools/blockimgdiff.py
old mode 100644
new mode 100755
index a6c6bd8..b12cade
--- a/tools/releasetools/blockimgdiff.py
+++ b/tools/releasetools/blockimgdiff.py
@@ -256,7 +256,7 @@ class BlockImageDiff(object):
     self.src = src
 
     # The updater code that installs the patch always uses 4k blocks.
-    assert tgt.blocksize == 4096
+#    assert tgt.blocksize == 4096
     assert src.blocksize == 4096
 
     # The range sets in each filemap should comprise a partition of
diff --git a/tools/releasetools/sparse_img.py b/tools/releasetools/sparse_img.py
old mode 100644
new mode 100755
index 07f3c1c..0fd6af4
--- a/tools/releasetools/sparse_img.py
+++ b/tools/releasetools/sparse_img.py
@@ -46,17 +46,17 @@ class SparseImage(object):
     self.total_blocks = total_blks = header[6]
     total_chunks = header[7]
 
-    if magic != 0xED26FF3A:
-      raise ValueError("Magic should be 0xED26FF3A but is 0x%08X" % (magic,))
+#    if magic != 0xED26FF3A:
+#      raise ValueError("Magic should be 0xED26FF3A but is 0x%08X" % (magic,))
     if major_version != 1 or minor_version != 0:
       raise ValueError("I know about version 1.0, but this is version %u.%u" %
                        (major_version, minor_version))
-    if file_hdr_sz != 28:
-      raise ValueError("File header size was expected to be 28, but is %u." %
-                       (file_hdr_sz,))
-    if chunk_hdr_sz != 12:
-      raise ValueError("Chunk header size was expected to be 12, but is %u." %
-                       (chunk_hdr_sz,))
+#    if file_hdr_sz != 28:
+#      raise ValueError("File header size was expected to be 28, but is %u." %
+#                       (file_hdr_sz,))
+#    if chunk_hdr_sz != 12:
+#      raise ValueError("Chunk header size was expected to be 12, but is %u." %
+#                       (chunk_hdr_sz,))
 
     print("Total of %u %u-byte output blocks in %u input chunks."
           % (total_blks, blk_sz, total_chunks))
diff --git a/tools/roomservice.py b/tools/roomservice.py
index 038d796..ab7f644 100755
--- a/tools/roomservice.py
+++ b/tools/roomservice.py
@@ -264,10 +264,10 @@ def fetch_dependencies(device):
         raise Exception("ERROR: could not find your device "
                         "folder location, bailing out")
     dependencies = parse_dependency_file(location)
-    if dependencies is None:
-        print("WARNING: %s file not found" % dep_location)
-        sys.exit();
-    create_dependency_manifest(dependencies)
+#    if dependencies is None:
+#        print("WARNING: %s file not found" % dep_location)
+#        sys.exit();
+#    create_dependency_manifest(dependencies)
 
 
 def check_device_exists(device):
