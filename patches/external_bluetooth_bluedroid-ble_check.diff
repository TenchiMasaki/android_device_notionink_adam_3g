project external/bluetooth/bluedroid/
diff --git a/bta/dm/bta_dm_act.c b/bta/dm/bta_dm_act.c
old mode 100644
new mode 100755
index 158095f..babc056
--- a/bta/dm/bta_dm_act.c
+++ b/bta/dm/bta_dm_act.c
@@ -2587,6 +2587,7 @@ static void bta_dm_discover_device(BD_ADDR remote_bd_addr)
                             );
     }
 
+#if BLE_INCLUDED == TRUE
     if((bta_dm_search_cb.p_btm_inq_info)
        && (bta_dm_search_cb.p_btm_inq_info->results.device_type == BT_DEVICE_TYPE_BLE)
        && (bta_dm_search_cb.state == BTA_DM_SEARCH_ACTIVE))
@@ -2594,6 +2595,7 @@ static void bta_dm_discover_device(BD_ADDR remote_bd_addr)
         /* Do not perform RNR for LE devices at inquiry complete*/
         bta_dm_search_cb.name_discover_done = TRUE;
     }
+#endif
 
     /* if name discovery is not done and application needs remote name */
     if ((!bta_dm_search_cb.name_discover_done)
diff --git a/bta/dm/bta_dm_main.c b/bta/dm/bta_dm_main.c
old mode 100644
new mode 100755
index 908d021..1815c31
--- a/bta/dm/bta_dm_main.c
+++ b/bta/dm/bta_dm_main.c
@@ -367,11 +367,13 @@ BOOLEAN bta_dm_search_sm_execute(BT_HDR *p_msg)
     APPL_TRACE_EVENT("bta_dm_search_sm_execute state:%d, event:0x%x",
         bta_dm_search_cb.state, p_msg->event);
 
+#if BTA_GATT_INCLUDED == TRUE
     if ((bta_dm_search_cb.state == BTA_DM_SEARCH_IDLE) &&
            ((p_msg->event == BTA_DM_API_SEARCH_EVT) || (p_msg->event == BTA_DM_API_DISCOVER_EVT)))
     {
         bta_dm_gattc_service_search_close(p_msg->event);
     }
+#endif
     /* look up the state table for the current state */
     state_table = bta_dm_search_st_tbl[bta_dm_search_cb.state];
 
diff --git a/btif/include/btif_common.h b/btif/include/btif_common.h
old mode 100644
new mode 100755
index 0145bbf..6c0c301
--- a/btif/include/btif_common.h
+++ b/btif/include/btif_common.h
@@ -24,6 +24,8 @@
 #include "bt_types.h"
 #include "bta_api.h"
 
+#undef TEST_APP_INTERFACE
+
 #ifndef LOG_TAG
 #error "LOG_TAG not defined, please add in .c file prior to including bt_common.h"
 #endif
diff --git a/btif/include/btif_gatt_multi_adv_util.h b/btif/include/btif_gatt_multi_adv_util.h
old mode 100644
new mode 100755
index fc591a2..ea7d525
--- a/btif/include/btif_gatt_multi_adv_util.h
+++ b/btif/include/btif_gatt_multi_adv_util.h
@@ -57,9 +57,11 @@ typedef struct
     BOOLEAN is_scan_rsp;
     UINT8 client_if;
     UINT16 service_uuid_len;
+#if BLE_INCLUDED==TRUE
     tBTA_BLE_AD_MASK mask;
     tBTA_BLE_ADV_DATA data;
     tBTA_BLE_ADV_PARAMS param;
+#endif
     TIMER_LIST_ENT tle_limited_timer;
     int timeout_s;
 }btgatt_multi_adv_inst_cb;
diff --git a/btif/src/bluetooth.c b/btif/src/bluetooth.c
old mode 100644
new mode 100755
index 5c507e4..c93cb9a
--- a/btif/src/bluetooth.c
+++ b/btif/src/bluetooth.c
@@ -47,11 +47,14 @@
 #define LOG_TAG "bluedroid"
 
 #include "btif_api.h"
+#include "btm_ble_api.h"
 #include "bd.h"
 #include "bt_utils.h"
 #include "l2cdefs.h"
 #include "l2c_api.h"
 
+#undef TEST_APP_INTERFACE
+
 #if TEST_APP_INTERFACE == TRUE
 #include <bt_testapp.h>
 #endif
diff --git a/btif/src/btif_core.c b/btif/src/btif_core.c
old mode 100644
new mode 100755
diff --git a/btif/src/btif_dm.c b/btif/src/btif_dm.c
old mode 100644
new mode 100755
index 54d4ae5..6bfed8e
--- a/btif/src/btif_dm.c
+++ b/btif/src/btif_dm.c
@@ -2044,6 +2044,7 @@ static void btif_dm_upstreams_evt(UINT16 event, char* p_param)
             BTIF_TRACE_DEBUG("BTA_DM_LINK_UP_EVT. Sending BT_ACL_STATE_CONNECTED");
 
             bd2str(&bd_addr, &bdstr);
+#if BLE_INCLUDED == TRUE
             if(btif_config_get_int("Remote", (char const *)&bdstr,"DevType", &dev_type) &&
                     p_data->link_up.link_type == BT_TRANSPORT_LE && dev_type == BT_DEVICE_TYPE_BREDR)
             {
@@ -2058,6 +2059,7 @@ static void btif_dm_upstreams_evt(UINT16 event, char* p_param)
                 BTIF_TRACE_DEBUG("Remote device addr type=%d", p_data->link_up.remote_addr_type);
                 btif_storage_set_remote_addr_type(&bd_addr, p_data->link_up.remote_addr_type);
             }
+#endif
             btif_update_remote_version_property(&bd_addr);
 
             HAL_CBACK(bt_hal_cbacks, acl_state_changed_cb, BT_STATUS_SUCCESS,
@@ -3050,10 +3052,10 @@ bt_status_t btif_dm_get_remote_services_by_transport(bt_bdaddr_t *remote_addr, i
     mask_ext.num_uuid = 0;
     mask_ext.p_uuid = NULL;
     mask_ext.srvc_mask = BTA_ALL_SERVICE_MASK;
-
+#if BTA_GATT_INCLUDED == TRUE
     BTA_DmDiscoverByTransport(remote_addr->address, &mask_ext,
                    bte_dm_search_services_evt, TRUE, BT_TRANSPORT_LE);
-
+#endif
     return BT_STATUS_SUCCESS;
 }
 
diff --git a/btif/src/btif_gap.c b/btif/src/btif_gap.c
old mode 100644
new mode 100755
index bb121e0..7adcebe
--- a/btif/src/btif_gap.c
+++ b/btif/src/btif_gap.c
@@ -55,8 +55,9 @@ static void Gap_BleAttrDBUpdate(BD_ADDR p_bda, UINT16 int_min, UINT16 int_max, U
     printf("%s:: remote_bd_addr=%02x:%02x:%02x:%02x:%02x:%02x, int_min=%d, int_max=%d, latency=%d sp_tout=%d\n", __FUNCTION__,
             p_bda[0], p_bda[1], p_bda[2], p_bda[3], p_bda[4], p_bda[5],
             int_min, int_max, latency, sp_tout);
+#if BLE_INCLUDED == TRUE
     L2CA_UpdateBleConnParams(p_bda, 50, 70, 0, 1000);
-
+#endif
 }
 
 
diff --git a/btif/src/btif_gatt_qual.c b/btif/src/btif_gatt_qual.c
old mode 100644
new mode 100755
index 84bd210..57e85a2
--- a/btif/src/btif_gatt_qual.c
+++ b/btif/src/btif_gatt_qual.c
@@ -41,6 +41,7 @@
 #include "bt_utils.h"
 #include "data_types.h"
 #include "gatt_api.h"
+#undef TEST_APP_INTERFACE
 
 #ifdef TEST_APP_INTERFACE
 #include <bt_testapp.h>
diff --git a/btif/src/btif_smp.c b/btif/src/btif_smp.c
old mode 100644
new mode 100755
index ecbe0e7..85df91c
--- a/btif/src/btif_smp.c
+++ b/btif/src/btif_smp.c
@@ -43,6 +43,8 @@
 #include "data_types.h"
 #include "smp_api.h"
 
+#undef TEST_APP_INTERFACE
+
 #ifdef TEST_APP_INTERFACE
 #include <bt_testapp.h>
 static void SmpInit(void)
diff --git a/hci/src/vendor.c b/hci/src/vendor.c
old mode 100644
new mode 100755
index 912b247..e3c8b2f
--- a/hci/src/vendor.c
+++ b/hci/src/vendor.c
@@ -102,7 +102,7 @@ void vendor_close(void) {
 }
 
 void vendor_ssrcleanup(void) {
-  if (vendor_interface)
+  if (vendor_interface && vendor_interface->ssr_cleanup)
     vendor_interface->ssr_cleanup();
 }
 
diff --git a/include/bt_testapp.h b/include/bt_testapp.h
old mode 100644
new mode 100755
index cf6540a..07e0610
--- a/include/bt_testapp.h
+++ b/include/bt_testapp.h
@@ -52,6 +52,7 @@
 #include "gap_api.h"
 #include <hardware/hardware.h>
 #include "data_types.h"
+#include "smp_api.h"
 
 __BEGIN_DECLS
 
diff --git a/main/bte_logmsg.c b/main/bte_logmsg.c
old mode 100644
new mode 100755
index 2afd13a..e4dec10
--- a/main/bte_logmsg.c
+++ b/main/bte_logmsg.c
@@ -475,8 +475,9 @@ tBTTRC_FUNC_MAP bttrc_set_level_map[] = {
 #if (DUN_INCLUDED==TRUE)
     {BTTRC_ID_STK_DUN, BTTRC_ID_STK_DUN, DUN_SetTraceLevel, "TRC_DUN", DEFAULT_CONF_TRACE_LEVEL},
 #endif
+#if (HIDH_HOST_INCLUDED==TRUE)
     {BTTRC_ID_STK_HID, BTTRC_ID_STK_HID, HID_HostSetTraceLevel, "TRC_HID_HOST", DEFAULT_CONF_TRACE_LEVEL},
-
+#endif
 #if (GAP_INCLUDED==TRUE)
     {BTTRC_ID_STK_GAP, BTTRC_ID_STK_GAP, GAP_SetTraceLevel, "TRC_GAP", DEFAULT_CONF_TRACE_LEVEL},
 #endif
diff --git a/stack/btm/btm_acl.c b/stack/btm/btm_acl.c
old mode 100644
new mode 100755
index 40f0cd4..98e0865
--- a/stack/btm/btm_acl.c
+++ b/stack/btm/btm_acl.c
@@ -3091,6 +3091,7 @@ static void rssi_monitor_hci_cmd_complete(void *p_data)
             return;
         }
 
+#if BLE_INCLUDED == TRUE
         switch(subcmd)
         {
         case WRITE_RSSI_MONITOR_THRESHOLD:
@@ -3138,6 +3139,7 @@ static void rssi_monitor_hci_cmd_complete(void *p_data)
             BTM_TRACE_EVENT("Rssi Monitor invalid command");
             break;
         }
+#endif
     }
     BTM_TRACE_EVENT("%s exit", __FUNCTION__);
 }
@@ -3160,9 +3162,10 @@ static void rssi_monitor_hci_cmd_complete(void *p_data)
 *******************************************************************************/
 tBTM_STATUS BTM_Write_Rssi_Monitor_Threshold(BD_ADDR remote_bda, char min, char max)
 {
+#if BLE_INCLUDED == TRUE
     void      *p_buf = 0;
     tACL_CONN *p_conn = 0;
-    UINT16    op_code = 0x03FF;
+    UINT16    op_code = 0x03FF; 
     UINT8     sub_cmd = WRITE_RSSI_MONITOR_THRESHOLD;
     UINT16    conn_handle = 0x0000;
     UINT8     cmd[5], *p_cursor;
@@ -3193,8 +3196,8 @@ tBTM_STATUS BTM_Write_Rssi_Monitor_Threshold(BD_ADDR remote_bda, char min, char
     *p_cursor++ = max;
 
     btsnd_hcic_vendor_spec_cmd(p_buf, op_code, sizeof(cmd), cmd, (void*)rssi_monitor_hci_cmd_complete);
-
     BTM_TRACE_API("%s exit", __FUNCTION__);
+#endif
     return (BTM_CMD_STARTED);
 }
 
@@ -3211,6 +3214,7 @@ tBTM_STATUS BTM_Write_Rssi_Monitor_Threshold(BD_ADDR remote_bda, char min, char
 *******************************************************************************/
 tBTM_STATUS BTM_Read_Rssi_Monitor_Threshold(BD_ADDR remote_bda)
 {
+#if BLE_INCLUDED == TRUE
     void      *p_buf = 0;
     tACL_CONN *p_conn = 0;
     UINT16    op_code = 0x03FF;
@@ -3245,6 +3249,7 @@ tBTM_STATUS BTM_Read_Rssi_Monitor_Threshold(BD_ADDR remote_bda)
     btsnd_hcic_vendor_spec_cmd(p_buf, op_code, sizeof(cmd), cmd, (void*)rssi_monitor_hci_cmd_complete);
 
     BTM_TRACE_API("%s exit", __FUNCTION__);
+#endif
     return (BTM_CMD_STARTED);
 }
 
@@ -3264,6 +3269,7 @@ tBTM_STATUS BTM_Read_Rssi_Monitor_Threshold(BD_ADDR remote_bda)
 *******************************************************************************/
 tBTM_STATUS BTM_Enable_Rssi_Monitor(BD_ADDR remote_bda, int enable)
 {
+#if BLE_INCLUDED == TRUE
     void      *p_buf = 0;
     tACL_CONN *p_conn = 0;
     UINT16    op_code = 0x03FF;
@@ -3298,6 +3304,7 @@ tBTM_STATUS BTM_Enable_Rssi_Monitor(BD_ADDR remote_bda, int enable)
     btsnd_hcic_vendor_spec_cmd(p_buf, op_code, sizeof(cmd), cmd, (void*)rssi_monitor_hci_cmd_complete);
 
     BTM_TRACE_API("%s exit", __FUNCTION__);
+#endif
     return (BTM_CMD_STARTED);
 }
 
@@ -3316,6 +3323,7 @@ tBTM_STATUS BTM_Enable_Rssi_Monitor(BD_ADDR remote_bda, int enable)
 *******************************************************************************/
 void btm_handle_rssi_monitor_event(UINT8 *p, UINT8 evt_len)
 {
+#if BLE_INCLUDED == TRUE
     BTM_TRACE_EVENT("%s enter", __FUNCTION__);
     if (p)
     {
@@ -3349,6 +3357,7 @@ void btm_handle_rssi_monitor_event(UINT8 *p, UINT8 evt_len)
     }
 
     BTM_TRACE_EVENT("%s exit", __FUNCTION__);
+#endif
 }
 
 /*******************************************************************************
@@ -3367,8 +3376,10 @@ void btm_handle_rssi_monitor_event(UINT8 *p, UINT8 evt_len)
 void btm_setup_rssi_threshold_callback(tBTM_RSSI_MONITOR_CMD_CPL_CB cmd_cpl_callback,
                                          tBTM_RSSI_MONITOR_EVENT_CB evt_callback)
 {
+#if BLE_INCLUDED == TRUE
     btm_cb.devcb.p_rssi_monitor_cmd_cpl_cb = cmd_cpl_callback;
     btm_cb.devcb.p_rssi_monitor_event_cb = evt_callback;
+#endif
 }
 
 /*******************************************************************************
diff --git a/stack/btm/btm_int.h b/stack/btm/btm_int.h
old mode 100644
new mode 100755
index 30ca1f0..c407b69
--- a/stack/btm/btm_int.h
+++ b/stack/btm/btm_int.h
@@ -42,7 +42,9 @@
 #endif
 #endif
 
+#if BLE_INCLUDED == TRUE
 tBTM_BLE_MULTI_ADV_CB  btm_multi_adv_cb;
+#endif
 
 #if BTM_MAX_LOC_BD_NAME_LEN > 0
 typedef char tBTM_LOC_BD_NAME[BTM_MAX_LOC_BD_NAME_LEN + 1];
diff --git a/wipowerif/src/wipower.c b/wipowerif/src/wipower.c
old mode 100644
new mode 100755
index aa2ce6f..c623f29
--- a/wipowerif/src/wipower.c
+++ b/wipowerif/src/wipower.c
@@ -64,9 +64,6 @@ unsigned char gStatus;
 wipower_state_t gState;
 unsigned char gCurrentLimit;
 timer_t  wp_data_timer;
-/* adv_inst is captured during MultiAdvertiser and
-** need to track same for wipower instance */
-extern UINT8 wipower_inst_id;
 
 char power_removal_event[] = {0x17, 0x00};
 void dispatch_wp_events (UINT16 len, char* p_param);
@@ -298,6 +295,10 @@ void dispatch_wp_events (UINT16 len, char* p_param) {
                 ALOGE("wipower_hal_cbacks not registered");
             }
 
+            if(alert == 0x01) {
+                /*Disable this event now*/
+                enable_power_apply(0x00, 0x01, 0x00);
+            }
         }
 
     } break;
@@ -449,7 +450,7 @@ int enable_data_notify(bool enable)
 
 int enable_power_apply(bool enable, bool on, bool time_flag)
 {
-    UINT8 en[6];
+    UINT8 en[5];
     if (DBG)
         ALOGI("%s:%d", __func__, enable);
 
@@ -471,8 +472,8 @@ int enable_power_apply(bool enable, bool on, bool time_flag)
         en[3] = WIPOWER_ADV_30MS_LSB;
         en[4] = WIPOWER_ADV_30MS_MSB;
     }
-    en[5] = wipower_inst_id;
-    BTA_DmVendorSpecificCommand(WP_HCI_VS_CMD, 6, en, enable_power_cb);
+
+    BTA_DmVendorSpecificCommand(WP_HCI_VS_CMD, 5, en, enable_power_cb);
     return 0;
 }
 
