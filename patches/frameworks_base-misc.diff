diff --git a/api/system-current.txt b/api/system-current.txt
old mode 100644
new mode 100755
index c33fe6e..3c982cd
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -49337,9 +49337,7 @@ package android.webkit {
 
   public static abstract interface WebViewProvider.ViewDelegate {
     method public abstract boolean dispatchKeyEvent(android.view.KeyEvent);
-    method public abstract android.view.View findFocus(android.view.View);
     method public abstract android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
-    method public abstract android.os.Handler getHandler(android.os.Handler);
     method public abstract void onActivityResult(int, int, android.content.Intent);
     method public abstract void onAttachedToWindow();
     method public abstract void onConfigurationChanged(android.content.res.Configuration);
diff --git a/core/java/android/content/ContentResolver.java b/core/java/android/content/ContentResolver.java
old mode 100644
new mode 100755
index 1c8c69f..792f46c
--- a/core/java/android/content/ContentResolver.java
+++ b/core/java/android/content/ContentResolver.java
@@ -1417,6 +1417,8 @@ public abstract class ContentResolver {
             // Arbitrary and not worth documenting, as Activity
             // Manager will kill this process shortly anyway.
             return -1;
+        } catch (NullPointerException ef) {
+        	return -1;
         } finally {
             releaseProvider(provider);
         }
diff --git a/core/java/android/hardware/Camera.java b/core/java/android/hardware/Camera.java
old mode 100644
new mode 100755
diff --git a/core/java/android/inputmethodservice/IInputMethodWrapper.java b/core/java/android/inputmethodservice/IInputMethodWrapper.java
index 167d5a0..d9cd3f58 100644
--- a/core/java/android/inputmethodservice/IInputMethodWrapper.java
+++ b/core/java/android/inputmethodservice/IInputMethodWrapper.java
@@ -287,6 +287,10 @@ class IInputMethodWrapper extends IInputMethod.Stub
     @Override
     public void setSessionEnabled(IInputMethodSession session, boolean enabled) {
         try {
+			if (session == null) {
+                Log.w(TAG, "No Session");
+                return;
+			}
             InputMethodSession ls = ((IInputMethodSessionWrapper)
                     session).getInternalInputMethodSession();
             if (ls == null) {
diff --git a/core/java/android/os/storage/StorageManager.java b/core/java/android/os/storage/StorageManager.java
old mode 100644
new mode 100755
index c5507b9..7c9b320
--- a/core/java/android/os/storage/StorageManager.java
+++ b/core/java/android/os/storage/StorageManager.java
@@ -1286,7 +1286,10 @@ public class StorageManager {
             return mMountService.mountAppFuse(name);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
+        } catch (IllegalStateException e) {
+            Log.e(TAG, "mountAppFuse(" + name + ") " + e.getMessage());
         }
+        return null;
     }
 
     /// Consts to match the password types in cryptfs.h
diff --git a/core/java/android/util/Log.java b/core/java/android/util/Log.java
old mode 100644
new mode 100755
index 5bc6c94..3b86269
--- a/core/java/android/util/Log.java
+++ b/core/java/android/util/Log.java
@@ -233,6 +233,7 @@ public final class Log {
      * @param msg The message you would like logged.
      */
     public static int e(String tag, String msg) {
+        if (tag == null || msg == null) return 0;
         return println_native(LOG_ID_MAIN, ERROR, tag, msg);
     }
 
diff --git a/core/java/android/webkit/WebView.java b/core/java/android/webkit/WebView.java
old mode 100644
new mode 100755
index f54edf1..ecace32
--- a/core/java/android/webkit/WebView.java
+++ b/core/java/android/webkit/WebView.java
@@ -32,7 +32,6 @@ import android.net.http.SslCertificate;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.os.StrictMode;
@@ -2643,16 +2642,6 @@ public class WebView extends AbsoluteLayout
         mProvider.getViewDelegate().onFinishTemporaryDetach();
     }
 
-    @Override
-    public Handler getHandler() {
-        return mProvider.getViewDelegate().getHandler(super.getHandler());
-    }
-
-    @Override
-    public View findFocus() {
-        return mProvider.getViewDelegate().findFocus(super.findFocus());
-    }
-
     /**
      * Receive the result from a previous call to {@link #startActivityForResult(Intent, int)}.
      *
diff --git a/core/java/android/webkit/WebViewProvider.java b/core/java/android/webkit/WebViewProvider.java
old mode 100644
new mode 100755
index e5b65e7..94d231c
--- a/core/java/android/webkit/WebViewProvider.java
+++ b/core/java/android/webkit/WebViewProvider.java
@@ -28,7 +28,6 @@ import android.graphics.drawable.Drawable;
 import android.net.http.SslCertificate;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Handler;
 import android.os.Message;
 import android.print.PrintDocumentAdapter;
 import android.view.DragEvent;
@@ -387,10 +386,6 @@ public interface WebViewProvider {
         public void onFinishTemporaryDetach();
 
         public void onActivityResult(int requestCode, int resultCode, Intent data);
-
-        public Handler getHandler(Handler originalHandler);
-
-        public View findFocus(View originalFocusedView);
     }
 
     interface ScrollDelegate {
diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
old mode 100644
new mode 100755
index 1fda0b7..2d38944
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -630,6 +630,7 @@ int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote)
     char methodTraceFileBuf[sizeof("-Xmethod-trace-file:") + PROPERTY_VALUE_MAX];
     char methodTraceFileSizeBuf[sizeof("-Xmethod-trace-file-size:") + PROPERTY_VALUE_MAX];
     char fingerprintBuf[sizeof("-Xfingerprint:") + PROPERTY_VALUE_MAX];
+    char compilerBackendBuf[sizeof("--compiler-backend=") + PROPERTY_VALUE_MAX];
 
     bool checkJni = false;
     property_get("dalvik.vm.checkjni", propBuf, "");
@@ -900,6 +901,16 @@ int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote)
     parseRuntimeOption("dalvik.vm.zygote.max-boot-retry", cachePruneBuf,
                        "-Xzygote-max-boot-retry=");
 
+    // Specify the compiler backend
+    property_get("config.dex2oat-compiler-backend", propBuf, "");
+    if (strcmp(propBuf, "Optimizing") == 0 || strcmp(propBuf, "Quick") == 0) {
+        snprintf(compilerBackendBuf, sizeof(compilerBackendBuf), "--compiler-backend=%s", propBuf);
+        addOption("-Xcompiler-option");
+        addOption(compilerBackendBuf);
+        addOption("-Ximage-compiler-option");
+        addOption(compilerBackendBuf);
+    }
+
     /*
      * When running with debug.generate-debug-info, add --generate-debug-info to
      * the compiler options so that the boot image, if it is compiled on device,
diff --git a/libs/hwui/renderthread/EglManager.cpp b/libs/hwui/renderthread/EglManager.cpp
old mode 100644
new mode 100755
index ac6a28f..c162723
--- a/libs/hwui/renderthread/EglManager.cpp
+++ b/libs/hwui/renderthread/EglManager.cpp
@@ -339,6 +339,7 @@ bool EglManager::swapBuffers(const Frame& frame, const SkRect& screenDirty) {
     frame.map(screenDirty, rects);
     eglSwapBuffersWithDamageKHR(mEglDisplay, frame.mSurface, rects,
             screenDirty.isEmpty() ? 0 : 1);
+    eglSwapBuffers(mEglDisplay, frame.mSurface);
 
     EGLint err = eglGetError();
     if (CC_LIKELY(err == EGL_SUCCESS)) {
diff --git a/media/java/android/mtp/MtpDatabase.java b/media/java/android/mtp/MtpDatabase.java
index 760a2d1..21aed9a 100755
--- a/media/java/android/mtp/MtpDatabase.java
+++ b/media/java/android/mtp/MtpDatabase.java
@@ -945,6 +945,7 @@ public class MtpDatabase implements AutoCloseable {
                             ID_WHERE, new String[] {  Integer.toString(handle) }, null, null);
             if (c != null && c.moveToNext()) {
                 String path = c.getString(1);
+                if (path == null) return MtpConstants.RESPONSE_INVALID_OBJECT_HANDLE;
                 path.getChars(0, path.length(), outFilePath, 0);
                 outFilePath[path.length()] = 0;
                 // File transfers from device to host will likely fail if the size is incorrect.
diff --git a/packages/MtpDocumentsProvider/src/com/android/mtp/AppFuse.java b/packages/MtpDocumentsProvider/src/com/android/mtp/AppFuse.java
old mode 100644
new mode 100755
index cd78e61..a6e436f
--- a/packages/MtpDocumentsProvider/src/com/android/mtp/AppFuse.java
+++ b/packages/MtpDocumentsProvider/src/com/android/mtp/AppFuse.java
@@ -67,8 +67,12 @@ public class AppFuse {
     void mount(StorageManager storageManager) throws IOException {
         Preconditions.checkState(mDeviceFd == null);
         mDeviceFd = storageManager.mountAppFuse(mName);
-        mMessageThread = new AppFuseMessageThread(mDeviceFd.dup().detachFd());
-        mMessageThread.start();
+        if(mDeviceFd == null) {
+            Log.e(MtpDocumentsProvider.TAG, "mount() mDeviceFd == null");
+        } else {
+            mMessageThread = new AppFuseMessageThread(mDeviceFd.dup().detachFd());
+            mMessageThread.start();
+        }
     }
 
     @VisibleForTesting
diff --git a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
old mode 100644
new mode 100755
index eea695f..8fbffe0
--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
@@ -652,7 +652,7 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku
     }
 
     private void ensureGroupStateLoadedLocked(int userId, boolean enforceUserUnlockingOrUnlocked) {
-        if (enforceUserUnlockingOrUnlocked && !isUserRunningAndUnlocked(userId)) {
+        if (enforceUserUnlockingOrUnlocked && !mUserManager.isUserRunning(userId)) {
             throw new IllegalStateException(
                     "User " + userId + " must be unlocked for widgets to be available");
         }
diff --git a/services/core/java/com/android/server/AlarmManagerService.java b/services/core/java/com/android/server/AlarmManagerService.java
old mode 100644
new mode 100755
index a1bda70..8683ff6
--- a/services/core/java/com/android/server/AlarmManagerService.java
+++ b/services/core/java/com/android/server/AlarmManagerService.java
@@ -2745,7 +2745,8 @@ class AlarmManagerService extends SystemService {
                                 // is a repeating alarm, so toss the hoser.
                                 removeImpl(alarm.operation);
                             }
-                        }
+                        } catch (Exception e) {
+						}
                     }
                     break;
                 }

diff --git a/services/core/java/com/android/server/policy/WindowOrientationListener.java b/services/core/java/com/android/server/policy/WindowOrientationListener.java
old mode 100644
new mode 100755
index a884851..cf0f5cd
--- a/services/core/java/com/android/server/policy/WindowOrientationListener.java
+++ b/services/core/java/com/android/server/policy/WindowOrientationListener.java
@@ -694,10 +694,11 @@ public abstract class WindowOrientationListener {
                                 // atan2 returns [-180, 180]; normalize to [0, 360]
                                 orientationAngle += 360;
                             }
+                            if(orientationAngle > 360) orientationAngle = 0; // protection for sensor sending bad values
 
                             // Find the nearest rotation.
                             int nearestRotation = (orientationAngle + 45) / 90;
-                            if (nearestRotation == 4) {
+                            if (nearestRotation >= 4) {
                                 nearestRotation = 0;
                             }
 
