diff --git a/api/system-current.txt b/api/system-current.txt
old mode 100644
new mode 100755
index a2c2771..c7f9b58
--- a/api/system-current.txt
+++ b/api/system-current.txt
@@ -52769,9 +52769,7 @@ package android.webkit {
   public static abstract interface WebViewProvider.ViewDelegate {
     method public default void autofill(android.util.SparseArray<android.view.autofill.AutofillValue>);
     method public abstract boolean dispatchKeyEvent(android.view.KeyEvent);
-    method public abstract android.view.View findFocus(android.view.View);
     method public abstract android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider();
-    method public abstract android.os.Handler getHandler(android.os.Handler);
     method public abstract void onActivityResult(int, int, android.content.Intent);
     method public abstract void onAttachedToWindow();
     method public abstract void onConfigurationChanged(android.content.res.Configuration);
diff --git a/core/java/android/content/ContentResolver.java b/core/java/android/content/ContentResolver.java
old mode 100644
new mode 100755
index 309827c..022909c
--- a/core/java/android/content/ContentResolver.java
+++ b/core/java/android/content/ContentResolver.java
@@ -1641,6 +1641,8 @@ public abstract class ContentResolver {
             // Arbitrary and not worth documenting, as Activity
             // Manager will kill this process shortly anyway.
             return -1;
+        } catch (NullPointerException ef) {
+        	return -1;
         } finally {
             releaseProvider(provider);
         }
diff --git a/core/java/android/hardware/Camera.java b/core/java/android/hardware/Camera.java
old mode 100644
new mode 100755
index aa35a66..2ad227c
--- a/core/java/android/hardware/Camera.java
+++ b/core/java/android/hardware/Camera.java
@@ -4178,7 +4178,7 @@ public class Camera {
         // Example string: "(10000,26623),(10000,30000)". Return null if the
         // passing string is null or the size is 0.
         private ArrayList<int[]> splitRange(String str) {
-            if (str == null || str.charAt(0) != '('
+            if (str == null || str.length() == 0 || str.charAt(0) != '('
                     || str.charAt(str.length() - 1) != ')') {
                 Log.e(TAG, "Invalid range list string=" + str);
                 return null;
diff --git a/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java b/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
old mode 100644
new mode 100755
index a05a8ec..4761ab6
--- a/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
+++ b/core/java/android/hardware/camera2/legacy/SurfaceTextureRenderer.java
@@ -441,6 +441,20 @@ public class SurfaceTextureRenderer {
         EGL14.eglChooseConfig(mEGLDisplay, attribList, /*offset*/ 0, configs, /*offset*/ 0,
                 configs.length, numConfigs, /*offset*/ 0);
         checkEglError("eglCreateContext RGB888+recordable ES2");
+        if (numConfigs[0] == 0) {
+            Log.w(TAG, "eglChooseConfig returned no configs, retrying without EGL_RECORDABLE_ANDROID");
+            int[] attribList2 = {
+                    EGL14.EGL_RED_SIZE, EGL_COLOR_BITLENGTH,
+                    EGL14.EGL_GREEN_SIZE, EGL_COLOR_BITLENGTH,
+                    EGL14.EGL_BLUE_SIZE, EGL_COLOR_BITLENGTH,
+                    EGL14.EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
+                    EGL14.EGL_SURFACE_TYPE, EGL14.EGL_PBUFFER_BIT | EGL14.EGL_WINDOW_BIT,
+                    EGL14.EGL_NONE
+            };
+            EGL14.eglChooseConfig(mEGLDisplay, attribList2, /*offset*/ 0, configs, /*offset*/ 0,
+                    configs.length, numConfigs, /*offset*/ 0);
+            checkEglError("eglCreateContext RGB888 ES2");
+        }
         mConfigs = configs[0];
         int[] attrib_list = {
                 EGL14.EGL_CONTEXT_CLIENT_VERSION, GLES_VERSION,
diff --git a/core/java/android/inputmethodservice/IInputMethodWrapper.java b/core/java/android/inputmethodservice/IInputMethodWrapper.java
index 765aff9..feba398 100644
--- a/core/java/android/inputmethodservice/IInputMethodWrapper.java
+++ b/core/java/android/inputmethodservice/IInputMethodWrapper.java
@@ -269,6 +269,10 @@ class IInputMethodWrapper extends IInputMethod.Stub
     @Override
     public void setSessionEnabled(IInputMethodSession session, boolean enabled) {
         try {
+			if (session == null) {
+                Log.w(TAG, "No Session");
+                return;
+			}
             InputMethodSession ls = ((IInputMethodSessionWrapper)
                     session).getInternalInputMethodSession();
             if (ls == null) {
diff --git a/core/java/android/os/storage/StorageManager.java b/core/java/android/os/storage/StorageManager.java
old mode 100644
new mode 100755
index f42edcd..cd16a1f
--- a/core/java/android/os/storage/StorageManager.java
+++ b/core/java/android/os/storage/StorageManager.java
@@ -1263,6 +1263,8 @@ public class StorageManager {
             mStorageManager.secdiscard(path);
         } catch (RemoteException e) {
             throw e.rethrowFromSystemServer();
+        } catch (IllegalStateException e) {
+            Log.e(TAG, "mountAppFuse(" + path + ") " + e.getMessage());
         }
     }
 
diff --git a/core/java/android/util/Log.java b/core/java/android/util/Log.java
old mode 100644
new mode 100755
index d857bf7..c616637
--- a/core/java/android/util/Log.java
+++ b/core/java/android/util/Log.java
@@ -235,6 +235,7 @@ public final class Log {
      * @param msg The message you would like logged.
      */
     public static int e(String tag, String msg) {
+        if (tag == null || msg == null) return 0;
         return println_native(LOG_ID_MAIN, ERROR, tag, msg);
     }
 
diff --git a/core/java/android/webkit/WebView.java b/core/java/android/webkit/WebView.java
old mode 100644
new mode 100755
index dda5df6..884aa0e
--- a/core/java/android/webkit/WebView.java
+++ b/core/java/android/webkit/WebView.java
@@ -35,7 +35,6 @@ import android.net.http.SslCertificate;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.Handler;
 import android.os.Looper;
 import android.os.Message;
 import android.os.StrictMode;
@@ -2894,16 +2893,6 @@ public class WebView extends AbsoluteLayout
         mProvider.getViewDelegate().onFinishTemporaryDetach();
     }
 
-    @Override
-    public Handler getHandler() {
-        return mProvider.getViewDelegate().getHandler(super.getHandler());
-    }
-
-    @Override
-    public View findFocus() {
-        return mProvider.getViewDelegate().findFocus(super.findFocus());
-    }
-
     /**
      * If WebView has already been loaded into the current process this method will return the
      * package that was used to load it. Otherwise, the package that would be used if the WebView
diff --git a/core/java/android/webkit/WebViewProvider.java b/core/java/android/webkit/WebViewProvider.java
old mode 100644
new mode 100755
index 820b49a..617419d
--- a/core/java/android/webkit/WebViewProvider.java
+++ b/core/java/android/webkit/WebViewProvider.java
@@ -30,7 +30,6 @@ import android.graphics.drawable.Drawable;
 import android.net.http.SslCertificate;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Handler;
 import android.os.Message;
 import android.print.PrintDocumentAdapter;
 import android.util.SparseArray;
@@ -419,10 +418,6 @@ public interface WebViewProvider {
         public void onFinishTemporaryDetach();
 
         public void onActivityResult(int requestCode, int resultCode, Intent data);
-
-        public Handler getHandler(Handler originalHandler);
-
-        public View findFocus(View originalFocusedView);
     }
 
     interface ScrollDelegate {
diff --git a/core/java/com/android/internal/os/ZygoteInit.java b/core/java/com/android/internal/os/ZygoteInit.java
old mode 100644
new mode 100755
diff --git a/core/jni/AndroidRuntime.cpp b/core/jni/AndroidRuntime.cpp
old mode 100644
new mode 100755
index 785fd2c..00d1004
--- a/core/jni/AndroidRuntime.cpp
+++ b/core/jni/AndroidRuntime.cpp
@@ -649,6 +649,7 @@ int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote)
     char methodTraceFileBuf[sizeof("-Xmethod-trace-file:") + PROPERTY_VALUE_MAX];
     char methodTraceFileSizeBuf[sizeof("-Xmethod-trace-file-size:") + PROPERTY_VALUE_MAX];
     char fingerprintBuf[sizeof("-Xfingerprint:") + PROPERTY_VALUE_MAX];
+    char compilerBackendBuf[sizeof("--compiler-backend=") + PROPERTY_VALUE_MAX];
 
     bool checkJni = false;
     property_get("dalvik.vm.checkjni", propBuf, "");
@@ -919,6 +920,16 @@ int AndroidRuntime::startVm(JavaVM** pJavaVM, JNIEnv** pEnv, bool zygote)
     parseRuntimeOption("dalvik.vm.zygote.max-boot-retry", cachePruneBuf,
                        "-Xzygote-max-boot-retry=");
 
+    // Specify the compiler backend
+    property_get("config.dex2oat-compiler-backend", propBuf, "");
+    if (strcmp(propBuf, "Optimizing") == 0 || strcmp(propBuf, "Quick") == 0) {
+        snprintf(compilerBackendBuf, sizeof(compilerBackendBuf), "--compiler-backend=%s", propBuf);
+        addOption("-Xcompiler-option");
+        addOption(compilerBackendBuf);
+        addOption("-Ximage-compiler-option");
+        addOption(compilerBackendBuf);
+    }
+
     /*
      * When running with debug.generate-debug-info, add --generate-debug-info to
      * the compiler options so that the boot image, if it is compiled on device,
diff --git a/core/res/res/xml/config_webview_packages.xml b/core/res/res/xml/config_webview_packages.xml
old mode 100644
new mode 100755
index f062b59..e8c8b73
--- a/core/res/res/xml/config_webview_packages.xml
+++ b/core/res/res/xml/config_webview_packages.xml
@@ -15,7 +15,11 @@
 -->
 
 <webviewproviders>
+    <webviewprovider description="Google WebView" packageName="com.google.android.webview" availableByDefault="true">
+    </webviewprovider>
+
     <!-- The default WebView implementation -->
     <webviewprovider description="Android WebView" packageName="com.android.webview" availableByDefault="true">
     </webviewprovider>
+
 </webviewproviders>
diff --git a/libs/hwui/renderthread/EglManager.cpp b/libs/hwui/renderthread/EglManager.cpp
old mode 100644
new mode 100755
index ed30708..24f365a
--- a/libs/hwui/renderthread/EglManager.cpp
+++ b/libs/hwui/renderthread/EglManager.cpp
@@ -340,6 +340,7 @@ bool EglManager::swapBuffers(const Frame& frame, const SkRect& screenDirty) {
     frame.map(screenDirty, rects);
     eglSwapBuffersWithDamageKHR(mEglDisplay, frame.mSurface, rects,
             screenDirty.isEmpty() ? 0 : 1);
+    eglSwapBuffers(mEglDisplay, frame.mSurface);
 
     EGLint err = eglGetError();
     if (CC_LIKELY(err == EGL_SUCCESS)) {
diff --git a/media/java/android/mtp/MtpDatabase.java b/media/java/android/mtp/MtpDatabase.java
index 56a5737..13fedab 100755
--- a/media/java/android/mtp/MtpDatabase.java
+++ b/media/java/android/mtp/MtpDatabase.java
@@ -954,6 +954,7 @@ public class MtpDatabase implements AutoCloseable {
                             ID_WHERE, new String[] {  Integer.toString(handle) }, null, null);
             if (c != null && c.moveToNext()) {
                 String path = c.getString(1);
+                if (path == null) return MtpConstants.RESPONSE_INVALID_OBJECT_HANDLE;
                 path.getChars(0, path.length(), outFilePath, 0);
                 outFilePath[path.length()] = 0;
                 // File transfers from device to host will likely fail if the size is incorrect.
diff --git a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
old mode 100644
new mode 100755
index 2d47c7b..061bde1
--- a/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
+++ b/packages/SystemUI/src/com/android/systemui/screenshot/GlobalScreenshot.java
@@ -441,6 +441,7 @@ class GlobalScreenshot {
 
     private MediaActionSound mCameraSound;
 
+    private final int mSfHwRotation;
 
     /**
      * @param context everything needs a context :(
@@ -511,6 +512,9 @@ class GlobalScreenshot {
         // Setup the Camera shutter sound
         mCameraSound = new MediaActionSound();
         mCameraSound.load(MediaActionSound.SHUTTER_CLICK);
+
+        // Load hardware rotation from prop
+        mSfHwRotation = android.os.SystemProperties.getInt("ro.sf.hwrotation",0) / 90;
     }
 
     /**
@@ -555,7 +559,10 @@ class GlobalScreenshot {
         // only in the natural orientation of the device :!)
         mDisplay.getRealMetrics(mDisplayMetrics);
         float[] dims = {mDisplayMetrics.widthPixels, mDisplayMetrics.heightPixels};
-        float degrees = getDegreesForRotation(mDisplay.getRotation());
+        int rot = mDisplay.getRotation();
+        // Allow for abnormal hardware orientation
+        rot = (rot + mSfHwRotation) % 4;
+        float degrees = getDegreesForRotation(rot);
         boolean requiresRotation = (degrees > 0);
         if (requiresRotation) {
             // Get the dimensions of the device in its native orientation
diff --git a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
old mode 100644
new mode 100755
index aad4431..765d2c6
--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java
@@ -663,7 +663,7 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku
     }
 
     private void ensureGroupStateLoadedLocked(int userId, boolean enforceUserUnlockingOrUnlocked) {
-        if (enforceUserUnlockingOrUnlocked && !isUserRunningAndUnlocked(userId)) {
+        if (enforceUserUnlockingOrUnlocked && !mUserManager.isUserRunning(userId)) {
             throw new IllegalStateException(
                     "User " + userId + " must be unlocked for widgets to be available");
         }
diff --git a/services/core/java/com/android/server/AlarmManagerService.java b/services/core/java/com/android/server/AlarmManagerService.java
old mode 100644
new mode 100755
index a378d02..45ec6e4
--- a/services/core/java/com/android/server/AlarmManagerService.java
+++ b/services/core/java/com/android/server/AlarmManagerService.java
@@ -2680,7 +2680,8 @@ class AlarmManagerService extends SystemService {
                                 // is a repeating alarm, so toss the hoser.
                                 removeImpl(alarm.operation);
                             }
-                        }
+                        } catch (Exception e) {
+						}
                     }
                     break;
                 }
diff --git a/services/core/java/com/android/server/pm/DefaultPermissionGrantPolicy.java b/services/core/java/com/android/server/pm/DefaultPermissionGrantPolicy.java
old mode 100644
new mode 100755
diff --git a/services/core/java/com/android/server/policy/WindowOrientationListener.java b/services/core/java/com/android/server/policy/WindowOrientationListener.java
old mode 100644
new mode 100755
index 64f64c0..67aa3cc
--- a/services/core/java/com/android/server/policy/WindowOrientationListener.java
+++ b/services/core/java/com/android/server/policy/WindowOrientationListener.java
@@ -608,7 +608,12 @@ public abstract class WindowOrientationListener {
                 // Reset the orientation listener state if the samples are too far apart in time
                 // or when we see values of (0, 0, 0) which indicates that we polled the
                 // accelerometer too soon after turning it on and we don't have any data yet.
-                final long now = event.timestamp;
+                final long now;
+                if (true) {
+                    now = SystemClock.elapsedRealtimeNanos();
+                } else {
+                    now = event.timestamp;
+                }
                 final long then = mLastFilteredTimestampNanos;
                 final float timeDeltaMS = (now - then) * 0.000001f;
                 final boolean skipSample;
@@ -705,10 +710,11 @@ public abstract class WindowOrientationListener {
                                 // atan2 returns [-180, 180]; normalize to [0, 360]
                                 orientationAngle += 360;
                             }
+                            if(orientationAngle > 360) orientationAngle = 0; // protection for sensor sending bad values
 
                             // Find the nearest rotation.
                             int nearestRotation = (orientationAngle + 45) / 90;
-                            if (nearestRotation == 4) {
+                            if (nearestRotation >= 4) {
                                 nearestRotation = 0;
                             }
 
diff --git a/services/core/java/com/android/server/wm/ScreenRotationAnimation.java b/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
old mode 100644
new mode 100755
index 83337ca..db2d11c
--- a/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
+++ b/services/core/java/com/android/server/wm/ScreenRotationAnimation.java
@@ -67,6 +67,7 @@ class ScreenRotationAnimation {
     BlackFrame mExitingBlackFrame;
     BlackFrame mEnteringBlackFrame;
     int mWidth, mHeight;
+    int mSnapshotRotation;
 
     int mOriginalRotation;
     int mOriginalWidth, mOriginalHeight;
@@ -240,13 +241,26 @@ class ScreenRotationAnimation {
             originalWidth = displayInfo.logicalWidth;
             originalHeight = displayInfo.logicalHeight;
         }
-        if (originalRotation == Surface.ROTATION_90
-                || originalRotation == Surface.ROTATION_270) {
-            mWidth = originalHeight;
-            mHeight = originalWidth;
+        // Allow for abnormal hardware orientation
+        mSnapshotRotation = (4 - android.os.SystemProperties.getInt("ro.sf.hwrotation",0) / 90) % 4;
+        if (mSnapshotRotation == Surface.ROTATION_0 || mSnapshotRotation == Surface.ROTATION_180) {
+            if (originalRotation == Surface.ROTATION_90
+                 || originalRotation == Surface.ROTATION_270) {
+                mWidth = originalHeight;
+                mHeight = originalWidth;
+            } else {
+                mWidth = originalWidth;
+                mHeight = originalHeight;
+            }
         } else {
-            mWidth = originalWidth;
-            mHeight = originalHeight;
+            if (originalRotation == Surface.ROTATION_90
+                || originalRotation == Surface.ROTATION_270) {
+                mWidth = originalWidth;
+                mHeight = originalHeight;
+            } else {
+                mWidth = originalHeight;
+                mHeight = originalWidth;
+            }
         }
 
         mOriginalRotation = originalRotation;
@@ -364,7 +378,7 @@ class ScreenRotationAnimation {
         // Compute the transformation matrix that must be applied
         // to the snapshot to make it stay in the same original position
         // with the current screen rotation.
-        int delta = DisplayContent.deltaRotation(rotation, Surface.ROTATION_0);
+        int delta = DisplayContent.deltaRotation(rotation, mSnapshotRotation);
         createRotationMatrix(delta, mWidth, mHeight, mSnapshotInitialMatrix);
 
         if (DEBUG_STATE) Slog.v(TAG, "**** ROTATION: " + delta);
diff --git a/services/core/java/com/android/server/wm/WindowManagerService.java b/services/core/java/com/android/server/wm/WindowManagerService.java
old mode 100644
new mode 100755
index 7a91d1e..8809cbd
--- a/services/core/java/com/android/server/wm/WindowManagerService.java
+++ b/services/core/java/com/android/server/wm/WindowManagerService.java
@@ -355,6 +355,7 @@ public class WindowManagerService extends IWindowManager.Stub
 
     final private KeyguardDisableHandler mKeyguardDisableHandler;
     boolean mKeyguardGoingAway;
+    private final int mSfHwRotation;
 
     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
         @Override
@@ -1135,6 +1136,9 @@ public class WindowManagerService extends IWindowManager.Stub
             closeSurfaceTransaction();
         }
 
+        // Load hardware rotation from prop
+        mSfHwRotation = android.os.SystemProperties.getInt("ro.sf.hwrotation",0) / 90;
+
         showEmulatorDisplayOverlayIfNeeded();
     }
 
