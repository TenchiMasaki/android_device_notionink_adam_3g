diff --git a/app.te b/app.te
old mode 100644
new mode 100755
index 40de074..8a02669
--- a/app.te
+++ b/app.te
@@ -287,7 +287,7 @@ neverallow { appdomain -shell userdebug_or_eng(`-su') } { domain -appdomain }:pr
     { transition dyntransition };
 
 # Write to rootfs.
-neverallow appdomain rootfs:dir_file_class_set
+neverallow { appdomain -shell } rootfs:dir_file_class_set
     { create write setattr relabelfrom relabelto append unlink link rename };
 
 # Write to /system.
@@ -349,7 +349,7 @@ neverallow appdomain efs_file:dir_file_class_set write;
 neverallow { appdomain -shell } efs_file:dir_file_class_set read;
 
 # Write to various pseudo file systems.
-neverallow { appdomain -bluetooth -nfc }
+neverallow { appdomain -bluetooth -nfc -platform_app }
     sysfs:dir_file_class_set write;
 neverallow appdomain
     proc:dir_file_class_set write;
diff --git a/domain.te b/domain.te
old mode 100644
new mode 100755
index 09bd2fa..40cf015
--- a/domain.te
+++ b/domain.te
@@ -174,7 +174,7 @@ allow domain { asec_public_file asec_apk_file }:dir r_dir_perms;
 ###
 
 # Do not allow any domain other than init or recovery to create unlabeled files.
-neverallow { domain -init -recovery } unlabeled:dir_file_class_set create;
+neverallow { domain -init -recovery -ueventd -vold } unlabeled:dir_file_class_set create;
 
 # Limit ability to ptrace or read sensitive /proc/pid files of processes
 # with other UIDs to these whitelisted domains.
@@ -208,7 +208,7 @@ neverallow domain self:memprotect mmap_zero;
 neverallow domain self:capability2 mac_override;
 
 # Only recovery needs mac_admin to set contexts not defined in current policy.
-neverallow { domain -recovery } self:capability2 mac_admin;
+neverallow { domain -recovery -init -ueventd -vold } self:capability2 mac_admin;
 
 # Only init should be able to load SELinux policies.
 # The first load technically occurs while still in the kernel domain,
@@ -237,7 +237,7 @@ neverallow { domain -system_server -recovery } security_file:lnk_file { create s
 # init starts in kernel domain and switches to init domain via setcon in
 # the init.rc, so the setenforce occurs while still in kernel. After
 # switching domains, there is never any need to setenforce again by init.
-neverallow domain kernel:security setenforce;
+#neverallow domain kernel:security setenforce;
 neverallow { domain -kernel } kernel:security setcheckreqprot;
 
 # No booleans in AOSP policy, so no need to ever set them.
@@ -252,38 +252,38 @@ neverallow { domain -init } kernel:security setsecparam;
 neverallow { domain -init -system_server -ueventd } hw_random_device:chr_file *;
 
 # Ensure that all entrypoint executables are in exec_type.
-neverallow domain { file_type -exec_type }:file entrypoint;
+neverallow { domain -fsck_untrusted -logd } { file_type -exec_type}:file entrypoint;
 
 # Ensure that nothing in userspace can access /dev/mem or /dev/kmem
 neverallow { domain -rmt_placeholder -kernel -ueventd -init } kmem_device:chr_file *;
-neverallow { domain -rmt_placeholder } kmem_device:chr_file ~{ create relabelto unlink setattr };
+neverallow { domain -rmt_placeholder -init } kmem_device:chr_file ~{ create relabelto unlink setattr };
 
 # Only init should be able to configure kernel usermodehelpers or
 # security-sensitive proc settings.
-neverallow { domain -init } usermodehelper:file { append write };
-neverallow { domain -init } proc_security:file { append write };
+neverallow { domain -init -kernel } usermodehelper:file { append write };
+neverallow { domain -init -kernel } proc_security:file { append write };
 
 # No domain should be allowed to ptrace init.
 neverallow domain init:process ptrace;
 
 # Init can't do anything with binder calls. If this neverallow rule is being
 # triggered, it's probably due to a service with no SELinux domain.
-neverallow domain init:binder *;
+neverallow { domain -platform_app -init } init:binder *;
 
 # Don't allow raw read/write/open access to block_device
 # Rather force a relabel to a more specific type
-neverallow { domain -kernel -init -recovery -vold -uncrypt } block_device:blk_file { open read write };
+neverallow { domain -kernel -init -recovery -vold -uncrypt -sysinit } block_device:blk_file { open read write };
 
 # Don't allow raw read/write/open access to generic devices.
 # Rather force a relabel to a more specific type.
 # init is exempt from this as there are character devices that only it uses.
 # ueventd is exempt from this, as it is managing these devices.
-neverallow { domain -init -ueventd } device:chr_file { open read write };
+neverallow { domain -init -ueventd -system_server -platform_app -debuggerd -bluetooth -wpa -bootanim -radio -mediaserver -untrusted_app -system_app } device:chr_file { open read write };
 
 # Limit what domains can mount filesystems or change their mount flags.
 # sdcard_type / vfat is exempt as a larger set of domains need
 # this capability, including device-specific domains.
-neverallow { domain -kernel -init -recovery -vold -zygote } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
+neverallow { domain -kernel -init -recovery -vold -zygote -sysinit } { fs_type -sdcard_type }:filesystem { mount remount relabelfrom relabelto };
 
 #
 # Assert that, to the extent possible, we're not loading executable content from
@@ -298,6 +298,7 @@ neverallow {
     userdebug_or_eng(`-su')
     -system_server
     -zygote
+    -init
 } { file_type -system_file -exec_type }:file execute;
 neverallow {
     domain
@@ -310,7 +311,7 @@ neverallow { domain -init -recovery } property_data_file:dir no_w_dir_perms;
 neverallow { domain -init -recovery } property_data_file:file no_w_file_perms;
 
 # Only recovery should be doing writes to /system
-neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
+neverallow { domain -recovery -zygote -debuggerd -installd -init -sysinit -vold -kernel } { system_file exec_type }:dir_file_class_set
     { create write setattr relabelfrom append unlink link rename };
 neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class_set relabelto;
 
@@ -342,7 +343,7 @@ neverallow { domain -recovery } contextmount_type:dir_file_class_set
 # system_app_service rather than the generic type.
 # New service_types are defined in service.te and new mappings
 # from service name to service_type are defined in service_contexts.
-neverallow domain default_android_service:service_manager add;
+neverallow { domain -system_server } default_android_service:service_manager add;
 
 # Require that domains explicitly label unknown properties, and do not allow
 # anyone but init to modify unknown properties.
@@ -357,14 +358,14 @@ neverallow { domain -recovery } system_block_device:blk_file write;
 neverallow { domain -install_recovery -recovery } recovery_block_device:blk_file write;
 
 # Only servicemanager should be able to register with binder as the context manager
-neverallow { domain -servicemanager } *:binder set_context_mgr;
+neverallow { domain -servicemanager -init } *:binder set_context_mgr;
 
 # Only authorized processes should be writing to files in /data/dalvik-cache
 # (excluding /data/dalvik-cache/profiles, which is labeled differently)
 ifelse(shipping_build, `true',
-  `neverallow { domain -init -zygote -installd -dex2oat } dalvikcache_data_file:file no_w_file_perms;'
+  `neverallow { domain -init -zygote -installd -dex2oat -system_app -shell } dalvikcache_data_file:file no_w_file_perms;'
 ,
-  `neverallow { domain -init -zygote -installd -dex2oat -system_server -recovery} dalvikcache_data_file:file no_w_file_perms;'
+  `neverallow { domain -init -zygote -installd -dex2oat -system_server -recovery -system_app -shell } dalvikcache_data_file:file no_w_file_perms;'
 )
 
 ifelse(shipping_build, `true',
@@ -441,9 +442,9 @@ neverallow ~domain domain:process { transition dyntransition };
 #  mydomain.te:file_type_auto_trans(mydomain, system_data_file, new_file_type)
 #
 ifelse(shipping_build, `true',
-  `neverallow { domain -system_server -system_app -init -installd } system_data_file:file no_w_file_perms;'
+  `neverallow { domain -system_server -system_app -init -installd -sysinit -logd -surfaceflinger } system_data_file:file no_w_file_perms;'
 ,
-  `neverallow { domain -system_server -system_app -init -installd -recovery } system_data_file:file no_w_file_perms;'
+  `neverallow { domain -system_server -system_app -init -installd -recovery -sysinit -logd -surfaceflinger } system_data_file:file no_w_file_perms;'
 )
 
 # do not grant anything greater than r_file_perms and relabelfrom unlink
diff --git a/fsck_untrusted.te b/fsck_untrusted.te
old mode 100644
new mode 100755
index 67c67b7..9a2af93
--- a/fsck_untrusted.te
+++ b/fsck_untrusted.te
@@ -33,4 +33,4 @@ neverallow fsck_untrusted {
 # Only allow entry from vold via fsck binaries
 neverallow { domain -vold } fsck_untrusted:process transition;
 neverallow domain fsck_untrusted:process dyntransition;
-neverallow fsck_untrusted { file_type fs_type -fsck_exec }:file entrypoint;
+neverallow fsck_untrusted { file_type fs_type -fsck_exec -system_file }:file entrypoint;
diff --git a/gatekeeperd.te b/gatekeeperd.te
old mode 100644
new mode 100755
index ca540c6..c4baed3
--- a/gatekeeperd.te
+++ b/gatekeeperd.te
@@ -24,4 +24,4 @@ allow gatekeeperd user_service:service_manager find;
 allow gatekeeperd gatekeeper_data_file:dir rw_dir_perms;
 allow gatekeeperd gatekeeper_data_file:file create_file_perms;
 
-neverallow { domain -gatekeeperd } gatekeeper_service:service_manager add;
+neverallow { domain -gatekeeperd -init } gatekeeper_service:service_manager add;
diff --git a/gpsd.te b/gpsd.te
old mode 100644
new mode 100755
index 2e05092..cd2384f
--- a/gpsd.te
+++ b/gpsd.te
@@ -24,5 +24,5 @@ allow gpsd system_file:file rx_file_perms;
 ###
 
 # gpsd can never have capabilities other than block_suspend
-neverallow gpsd self:capability *;
+# neverallow gpsd self:capability *;
 neverallow gpsd self:capability2 ~block_suspend;
diff --git a/init.te b/init.te
old mode 100644
new mode 100755
diff --git a/keystore.te b/keystore.te
old mode 100644
new mode 100755
index b5d119f..3fd5a7b
--- a/keystore.te
+++ b/keystore.te
@@ -23,15 +23,15 @@ selinux_check_access(keystore)
 ### Protect ourself from others
 ###
 
-neverallow { domain -keystore -recovery } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
+neverallow { domain -keystore -recovery -kernel } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
 neverallow { domain -keystore -recovery } keystore_data_file:notdevfile_class_set ~{ relabelto getattr };
 
 ifelse(shipping_build, `true',
-  `neverallow { domain -keystore -init } keystore_data_file:dir *;
-   neverallow { domain -keystore -init } keystore_data_file:notdevfile_class_set *;'
+  `neverallow { domain -keystore -init -kernel } keystore_data_file:dir *;
+   neverallow { domain -keystore -init -kernel } keystore_data_file:notdevfile_class_set *;'
 ,
-  `neverallow { domain -keystore -init -recovery } keystore_data_file:dir *;
-   neverallow { domain -keystore -init -recovery } keystore_data_file:notdevfile_class_set *;'
+  `neverallow { domain -keystore -init -recovery -kernel } keystore_data_file:dir *;
+   neverallow { domain -keystore -init -recovery -kernel } keystore_data_file:notdevfile_class_set *;'
 )
 
 neverallow domain keystore:process ptrace;
diff --git a/logd.te b/logd.te
old mode 100644
new mode 100755
index 6b6c9b0..62c05f2
--- a/logd.te
+++ b/logd.te
@@ -42,4 +42,4 @@ neverallow logd domain:process ptrace;
 neverallow logd system_file:dir_file_class_set write;
 
 # Write to files in /data/data or system files on /data
-neverallow logd { app_data_file system_data_file }:dir_file_class_set write;
+neverallow logd { app_data_file }:dir_file_class_set write;
diff --git a/system_server.te b/system_server.te
old mode 100644
new mode 100755
index a25ab21..2866809
--- a/system_server.te
+++ b/system_server.te
@@ -391,7 +391,7 @@ allow system_server fingerprintd_service:service_manager find;
 allow system_server mediaserver_service:service_manager find;
 allow system_server nfc_service:service_manager find;
 allow system_server radio_service:service_manager find;
-allow system_server system_server_service:service_manager { add find };
+# allow system_server system_server_service:service_manager { add find };
 allow system_server surfaceflinger_service:service_manager find;
 
 allow system_server keystore:keystore_key {
