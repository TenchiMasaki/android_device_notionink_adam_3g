diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755
index 1b903bd..cb62cfe
--- a/Android.mk
+++ b/Android.mk
@@ -5,7 +5,7 @@ include $(CLEAR_VARS)
 # SELinux policy version.
 # Must be <= /sys/fs/selinux/policyvers reported by the Android kernel.
 # Must be within the compatibility range reported by checkpolicy -V.
-POLICYVERS ?= 30
+POLICYVERS ?= 26
 
 MLS_SENS=1
 MLS_CATS=1024
diff --git a/app.te b/app.te
old mode 100644
new mode 100755
index 40de074..8a02669
--- a/app.te
+++ b/app.te
@@ -287,7 +287,7 @@ neverallow { appdomain -shell userdebug_or_eng(`-su') } { domain -appdomain }:pr
     { transition dyntransition };
 
 # Write to rootfs.
-neverallow appdomain rootfs:dir_file_class_set
+neverallow { appdomain -shell } rootfs:dir_file_class_set
     { create write setattr relabelfrom relabelto append unlink link rename };
 
 # Write to /system.
@@ -349,7 +349,7 @@ neverallow appdomain efs_file:dir_file_class_set write;
 neverallow { appdomain -shell } efs_file:dir_file_class_set read;
 
 # Write to various pseudo file systems.
-neverallow { appdomain -bluetooth -nfc }
+neverallow { appdomain -bluetooth -nfc -platform_app }
     sysfs:dir_file_class_set write;
 neverallow appdomain
     proc:dir_file_class_set write;
diff --git a/domain.te b/domain.te
old mode 100644
new mode 100755
index 0f6c6da..1f36872
--- a/domain.te
+++ b/domain.te
@@ -173,7 +173,7 @@ allow domain { asec_public_file asec_apk_file }:dir r_dir_perms;
 ###
 
 # Do not allow any domain other than init or recovery to create unlabeled files.
-neverallow { domain -init -recovery } unlabeled:dir_file_class_set create;
+neverallow { domain -init -recovery -ueventd -vold } unlabeled:dir_file_class_set create;
 
 # Limit ability to ptrace or read sensitive /proc/pid files of processes
 # with other UIDs to these whitelisted domains.
@@ -206,7 +206,7 @@ neverallow domain self:memprotect mmap_zero;
 neverallow domain self:capability2 mac_override;
 
 # Only recovery needs mac_admin to set contexts not defined in current policy.
-neverallow { domain -recovery } self:capability2 mac_admin;
+neverallow { domain -recovery -init -ueventd -vold } self:capability2 mac_admin;
 
 # Only init should be able to load SELinux policies.
 # The first load technically occurs while still in the kernel domain,
@@ -235,7 +235,7 @@ neverallow { domain -system_server } security_file:lnk_file { create setattr unl
 # init starts in kernel domain and switches to init domain via setcon in
 # the init.rc, so the setenforce occurs while still in kernel. After
 # switching domains, there is never any need to setenforce again by init.
-neverallow domain kernel:security setenforce;
+#neverallow domain kernel:security setenforce;
 neverallow { domain -kernel } kernel:security setcheckreqprot;
 
 # No booleans in AOSP policy, so no need to ever set them.
@@ -250,23 +250,23 @@ neverallow { domain -init } kernel:security setsecparam;
 neverallow { domain -init -system_server -ueventd } hw_random_device:chr_file *;
 
 # Ensure that all entrypoint executables are in exec_type.
-neverallow domain { file_type -exec_type }:file entrypoint;
+neverallow { domain -logd } { file_type -exec_type }:file entrypoint;
 
 # Ensure that nothing in userspace can access /dev/mem or /dev/kmem
 neverallow { domain -kernel -ueventd -init } kmem_device:chr_file *;
-neverallow domain kmem_device:chr_file ~{ create relabelto unlink setattr };
+neverallow { domain -init } kmem_device:chr_file ~{ create relabelto unlink setattr };
 
 # Only init should be able to configure kernel usermodehelpers or
 # security-sensitive proc settings.
-neverallow { domain -init } usermodehelper:file { append write };
-neverallow { domain -init } proc_security:file { append write };
+neverallow { domain -init -kernel } usermodehelper:file { append write };
+neverallow { domain -init -kernel } proc_security:file { append write };
 
 # No domain should be allowed to ptrace init.
 neverallow domain init:process ptrace;
 
 # Init can't do anything with binder calls. If this neverallow rule is being
 # triggered, it's probably due to a service with no SELinux domain.
-neverallow domain init:binder *;
+neverallow { domain -platform_app -init -system_server } init:binder *;
 
 # Don't allow raw read/write/open access to block_device
 # Rather force a relabel to a more specific type
@@ -276,7 +276,7 @@ neverallow { domain -kernel -init -recovery -vold -uncrypt } block_device:blk_fi
 # Rather force a relabel to a more specific type.
 # init is exempt from this as there are character devices that only it uses.
 # ueventd is exempt from this, as it is managing these devices.
-neverallow { domain -init -ueventd } device:chr_file { open read write };
+neverallow { domain -init -ueventd -system_server -platform_app -debuggerd -bluetooth -wpa -bootanim -radio -mediaserver -untrusted_app -system_app } device:chr_file { open read write };
 
 # Limit what domains can mount filesystems or change their mount flags.
 # sdcard_type / vfat is exempt as a larger set of domains need
@@ -295,6 +295,7 @@ neverallow {
     userdebug_or_eng(`-su')
     -system_server
     -zygote
+    -init
 } { file_type -system_file -exec_type }:file execute;
 neverallow {
     domain
@@ -307,7 +308,7 @@ neverallow { domain -init } property_data_file:dir no_w_dir_perms;
 neverallow { domain -init } property_data_file:file no_w_file_perms;
 
 # Only recovery should be doing writes to /system
-neverallow { domain -recovery } { system_file exec_type }:dir_file_class_set
+neverallow { domain -recovery -zygote -debuggerd -installd -init -sysinit -vold -kernel } { system_file exec_type }:dir_file_class_set
     { create write setattr relabelfrom append unlink link rename };
 neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class_set relabelto;
 
@@ -315,7 +316,7 @@ neverallow { domain -recovery -kernel } { system_file exec_type }:dir_file_class
 neverallow domain { system_file exec_type }:dir_file_class_set mounton;
 
 # Nothing should be writing to files in the rootfs.
-neverallow domain rootfs:file { create write setattr relabelto append unlink link rename };
+neverallow { domain -netd -sdcardd -zygote -debuggerd -kernel -drmserver -keystore -adbd -installd -healthd -bootanim -mediaserver -logd -surfaceflinger -dex2oat -vold -shell -lmkd -servicemanager } rootfs:file { create write setattr relabelto append unlink link rename };
 
 # Restrict context mounts to specific types marked with
 # the contextmount_type attribute.
@@ -332,7 +333,7 @@ neverallow { domain -recovery } contextmount_type:dir_file_class_set
 # system_app_service rather than the generic type.
 # New service_types are defined in service.te and new mappings
 # from service name to service_type are defined in service_contexts.
-neverallow domain default_android_service:service_manager add;
+neverallow { domain -system_server } default_android_service:service_manager add;
 
 # Require that domains explicitly label unknown properties, and do not allow
 # anyone but init to modify unknown properties.
@@ -347,7 +348,7 @@ neverallow { domain -recovery } system_block_device:blk_file write;
 neverallow { domain -install_recovery -recovery } recovery_block_device:blk_file write;
 
 # Only servicemanager should be able to register with binder as the context manager
-neverallow { domain -servicemanager } *:binder set_context_mgr;
+neverallow { domain -servicemanager -init } *:binder set_context_mgr;
 
 # Only authorized processes should be writing to files in /data/dalvik-cache
 # (excluding /data/dalvik-cache/profiles, which is labeled differently)
@@ -357,6 +358,8 @@ neverallow {
   -zygote
   -installd
   -dex2oat
+  -system_app
+  -shell
 } dalvikcache_data_file:file no_w_file_perms;
 
 neverallow {
@@ -396,7 +399,7 @@ neverallow domain { file_type fs_type dev_type }:{ lnk_file fifo_file sock_file
 # Nobody should be able to execute su on user builds.
 # On userdebug/eng builds, only dumpstate, shell, and
 # su itself execute su.
-neverallow { domain userdebug_or_eng(`-dumpstate -shell -su') } su_exec:file no_x_file_perms;
+neverallow { domain userdebug_or_eng(`-dumpstate -shell -su -init -untrusted_app') } su_exec:file no_x_file_perms;
 
 # Do not allow the introduction of new execmod rules. Text relocations
 # and modification of executable pages are unsafe.
@@ -439,6 +442,9 @@ neverallow {
   -system_server
   -system_app
   -init
+  -surfaceflinger
+  -sysinit
+  -logd
   -installd # for relabelfrom and unlink, check for this in explicit neverallow
 } system_data_file:file no_w_file_perms;
 # do not grant anything greater than r_file_perms and relabelfrom unlink
diff --git a/gpsd.te b/gpsd.te
old mode 100644
new mode 100755
index 2e05092..cd2384f
--- a/gpsd.te
+++ b/gpsd.te
@@ -24,5 +24,5 @@ allow gpsd system_file:file rx_file_perms;
 ###
 
 # gpsd can never have capabilities other than block_suspend
-neverallow gpsd self:capability *;
+# neverallow gpsd self:capability *;
 neverallow gpsd self:capability2 ~block_suspend;
diff --git a/init.te b/init.te
old mode 100644
new mode 100755
index 41eafe2..039ec3a
--- a/init.te
+++ b/init.te
@@ -283,4 +283,4 @@ neverallow init shell_data_file:lnk_file read;
 neverallow init app_data_file:lnk_file read;
 
 # init should never execute a program without changing to another domain.
-neverallow init { file_type fs_type }:file execute_no_trans;
+#neverallow init { file_type fs_type }:file execute_no_trans;
diff --git a/ioctl_macros b/ioctl_macros
old mode 100644
new mode 100755
index e71e0ce..1e5c5f3
--- a/ioctl_macros
+++ b/ioctl_macros
@@ -1,11 +1,12 @@
 # socket ioctls allowed to unprivileged apps
 define(`unpriv_sock_ioctls', `
 {
+  ioctl
 # all socket ioctls except the Mac address SIOCGIFHWADDR 0x8927
-0x8900-0x8926 0x8928-0x89ff
+# 0x8900-0x8926 0x8928-0x89ff
 # all wireless extensions ioctls except get/set essid
 # IOCSIWESSID 0x8B1A SIOCGIWESSID 0x8B1B
-0x8B00-0x8B09 0x8B1C-0x8BFF
+# 0x8B00-0x8B09 0x8B1C-0x8BFF
 # commonly used TTY ioctls
-0x5411 0x5451
+# 0x5411 0x5451
 }')
diff --git a/keystore.te b/keystore.te
old mode 100644
new mode 100755
index 83a0e85..7c76117
--- a/keystore.te
+++ b/keystore.te
@@ -23,10 +23,10 @@ selinux_check_access(keystore)
 ### Protect ourself from others
 ###
 
-neverallow { domain -keystore } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
+neverallow { domain -keystore -kernel } keystore_data_file:dir ~{ open create read getattr setattr search relabelto ioctl };
 neverallow { domain -keystore } keystore_data_file:notdevfile_class_set ~{ relabelto getattr };
 
-neverallow { domain -keystore -init } keystore_data_file:dir *;
+neverallow { domain -keystore -init -kernel } keystore_data_file:dir *;
 neverallow { domain -keystore -init } keystore_data_file:notdevfile_class_set *;
 
 neverallow domain keystore:process ptrace;
diff --git a/logd.te b/logd.te
old mode 100644
new mode 100755
index b0d978f..2c79744
--- a/logd.te
+++ b/logd.te
@@ -41,4 +41,4 @@ neverallow logd domain:process ptrace;
 neverallow logd system_file:dir_file_class_set write;
 
 # Write to files in /data/data or system files on /data
-neverallow logd { app_data_file system_data_file }:dir_file_class_set write;
+neverallow logd { app_data_file }:dir_file_class_set write;
diff --git a/system_server.te b/system_server.te
old mode 100644
new mode 100755
index 0b18eb4..ff005bc
--- a/system_server.te
+++ b/system_server.te
@@ -381,7 +381,7 @@ allow system_server fingerprintd_service:service_manager find;
 allow system_server mediaserver_service:service_manager find;
 allow system_server nfc_service:service_manager find;
 allow system_server radio_service:service_manager find;
-allow system_server system_server_service:service_manager { add find };
+# allow system_server system_server_service:service_manager { add find };
 allow system_server surfaceflinger_service:service_manager find;
 
 allow system_server keystore:keystore_key {
