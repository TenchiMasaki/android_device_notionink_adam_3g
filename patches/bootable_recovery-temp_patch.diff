project bootable/recovery/
diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755
index b159468..b741865
--- a/Android.mk
+++ b/Android.mk
@@ -30,6 +30,8 @@ include $(BUILD_STATIC_LIBRARY)
 
 include $(CLEAR_VARS)
 
+LOCAL_CPP_INCLUDES += system/extras/ext4_utils
+
 LOCAL_SRC_FILES := \
     recovery.cpp \
     bootloader.cpp \
diff --git a/minadbd/Android.mk b/minadbd/Android.mk
old mode 100644
new mode 100755
index 3fd52bb..4df899e
--- a/minadbd/Android.mk
+++ b/minadbd/Android.mk
@@ -23,7 +23,8 @@ LOCAL_SRC_FILES := \
 
 LOCAL_CFLAGS := -O2 -g -DADB_HOST=0 -Wall -Wno-unused-parameter
 LOCAL_CFLAGS += -D_XOPEN_SOURCE -D_GNU_SOURCE
-LOCAL_C_INCLUDES += $(LOCAL_PATH)/..
+LOCAL_C_INCLUDES += $(LOCAL_PATH)/.. \
+	system/extras/ext4_utils
 
 LOCAL_MODULE := libminadbd
 
diff --git a/roots.cpp b/roots.cpp
old mode 100644
new mode 100755
index 98faafd..eb59b61
--- a/roots.cpp
+++ b/roots.cpp
@@ -30,9 +30,9 @@
 #include "mtdutils/mounts.h"
 #include "roots.h"
 #include "common.h"
-#include "make_ext4fs.h"
+//#include "make_ext4fs.h"
 extern "C" {
-#include "wipe.h"
+//#include "wipe.h"
 #include "cryptfs.h"
 }
 
@@ -543,7 +543,7 @@ int format_volume(const char* volume, bool force) {
                 LOGE("format_volume: failed to open %s\n", v->key_loc);
                 return -1;
             }
-            wipe_block_device(fd, get_file_size(fd));
+//            wipe_block_device(fd, get_file_size(fd));
             close(fd);
         }
 
@@ -555,7 +555,7 @@ int format_volume(const char* volume, bool force) {
         }
         int result;
         if (strcmp(v->fs_type, "ext4") == 0) {
-            result = make_ext4fs(v->blk_device, length, volume, sehandle);
+//            result = make_ext4fs(v->blk_device, length, volume, sehandle);
         } else {   /* Has to be f2fs because we checked earlier. */
             if (v->key_loc != NULL && strcmp(v->key_loc, "footer") == 0 && length < 0) {
                 LOGE("format_volume: crypt footer + negative length (%zd) not supported on %s\n", length, v->fs_type);
@@ -595,7 +595,7 @@ int erase_persistent_partition() {
     }
 
     int fd = open(v->blk_device, O_RDWR);
-    uint64_t size = get_file_size(fd);
+    uint64_t size = 0;//get_file_size(fd);
     if (size == 0) {
         LOGE("failed to stat size of /persistent\n");
         close(fd);
@@ -607,7 +607,7 @@ int erase_persistent_partition() {
     read(fd, &oem_unlock_enabled, 1);
 
     if (oem_unlock_enabled) {
-        if (wipe_block_device(fd, size)) {
+        if (0) { //(wipe_block_device(fd, size)) {
            LOGE("error wiping /persistent: %s\n", strerror(errno));
            close(fd);
            return -1;
diff --git a/updater/install.c b/updater/install.c
old mode 100644
new mode 100755
index 3a086dc..8ebb173
--- a/updater/install.c
+++ b/updater/install.c
@@ -1623,7 +1623,7 @@ Value* WipeBlockDeviceFn(const char* name, State* state, int argc, Expr* argv[])
 
     size_t len = strtoull(len_str, NULL, 0);
     int fd = open(filename, O_WRONLY, 0644);
-    int success = wipe_block_device(fd, len);
+    int success = 0;//wipe_block_device(fd, len);
 
     free(filename);
     free(len_str);

